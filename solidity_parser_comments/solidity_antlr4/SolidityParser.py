# Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008a")
        buf.write("\u04b6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\7\2\u00de\n\2\f\2\16\2\u00e1\13\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\5\5\u00ef\n\5\3\6\3\6\5")
        buf.write("\6\u00f3\n\6\3\6\7\6\u00f6\n\6\f\6\16\6\u00f9\13\6\3\7")
        buf.write("\3\7\3\b\5\b\u00fe\n\b\3\b\3\b\5\b\u0102\n\b\3\b\5\b\u0105")
        buf.write("\n\b\3\t\3\t\3\t\5\t\u010a\n\t\3\n\3\n\3\n\3\n\5\n\u0110")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\n\5\n\u0117\n\n\3\n\3\n\5\n\u011b")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u0126\n\n")
        buf.write("\f\n\16\n\u0129\13\n\3\n\3\n\3\n\3\n\3\n\5\n\u0130\n\n")
        buf.write("\3\13\3\13\3\f\5\f\u0135\n\f\3\f\3\f\3\f\3\f\3\f\3\f\7")
        buf.write("\f\u013d\n\f\f\f\16\f\u0140\13\f\5\f\u0142\n\f\3\f\3\f")
        buf.write("\7\f\u0146\n\f\f\f\16\f\u0149\13\f\3\f\3\f\3\r\3\r\3\r")
        buf.write("\5\r\u0150\n\r\3\r\5\r\u0153\n\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0160\n\16\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0169\n\17\f\17\16")
        buf.write("\17\u016c\13\17\3\17\3\17\3\17\5\17\u0171\n\17\3\17\3")
        buf.write("\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u018c\n\23\3\23\5\23\u018f\n\23\3\23\3")
        buf.write("\23\3\24\3\24\3\24\3\24\3\24\7\24\u0198\n\24\f\24\16\24")
        buf.write("\u019b\13\24\3\24\3\24\5\24\u019f\n\24\3\25\3\25\3\25")
        buf.write("\5\25\u01a4\n\25\3\26\3\26\3\27\3\27\3\27\3\27\3\27\7")
        buf.write("\27\u01ad\n\27\f\27\16\27\u01b0\13\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\7\27\u01b9\n\27\f\27\16\27\u01bc\13")
        buf.write("\27\5\27\u01be\n\27\3\27\3\27\3\30\3\30\3\30\5\30\u01c5")
        buf.write("\n\30\3\30\3\30\7\30\u01c9\n\30\f\30\16\30\u01cc\13\30")
        buf.write("\3\30\3\30\5\30\u01d0\n\30\3\31\3\31\3\31\5\31\u01d5\n")
        buf.write("\31\3\31\5\31\u01d8\n\31\3\32\3\32\3\32\3\32\5\32\u01de")
        buf.write("\n\32\3\32\3\32\5\32\u01e2\n\32\3\33\3\33\5\33\u01e6\n")
        buf.write("\33\3\33\3\33\3\33\5\33\u01eb\n\33\3\34\3\34\3\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u01f8\n\35\f")
        buf.write("\35\16\35\u01fb\13\35\3\36\3\36\3\36\3\36\5\36\u0201\n")
        buf.write("\36\3\36\3\36\3\37\3\37\3 \3 \3 \3 \5 \u020b\n \3 \3 ")
        buf.write("\7 \u020f\n \f \16 \u0212\13 \3 \3 \3!\3!\3!\3!\7!\u021a")
        buf.write("\n!\f!\16!\u021d\13!\5!\u021f\n!\3!\3!\3\"\3\"\5\"\u0225")
        buf.write("\n\"\3\"\5\"\u0228\n\"\3#\3#\3#\3#\7#\u022e\n#\f#\16#")
        buf.write("\u0231\13#\5#\u0233\n#\3#\3#\3$\3$\5$\u0239\n$\3$\5$\u023c")
        buf.write("\n$\3%\3%\3%\3%\7%\u0242\n%\f%\16%\u0245\13%\5%\u0247")
        buf.write("\n%\3%\3%\3&\3&\5&\u024d\n&\3\'\3\'\5\'\u0251\n\'\3\'")
        buf.write("\3\'\3(\3(\3(\3(\3(\3(\3(\5(\u025c\n(\3(\3(\3(\5(\u0261")
        buf.write("\n(\3(\7(\u0264\n(\f(\16(\u0267\13(\3)\3)\3)\7)\u026c")
        buf.write("\n)\f)\16)\u026f\13)\3*\3*\5*\u0273\n*\3+\3+\3+\3+\5+")
        buf.write("\u0279\n+\3+\3+\3+\5+\u027e\n+\3+\3+\3,\3,\3-\3-\3.\3")
        buf.write(".\3.\3.\3.\7.\u028b\n.\f.\16.\u028e\13.\3.\3.\5.\u0292")
        buf.write("\n.\3/\3/\3\60\3\60\3\61\3\61\7\61\u029a\n\61\f\61\16")
        buf.write("\61\u029d\13\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\5\62\u02b2\n\62\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u02be\n\64\3\65\3\65\3\65\5\65\u02c3")
        buf.write("\n\65\3\65\3\65\6\65\u02c7\n\65\r\65\16\65\u02c8\3\66")
        buf.write("\3\66\5\66\u02cd\n\66\3\66\5\66\u02d0\n\66\3\66\3\66\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\38\38\58\u02dc\n8\39\39\3")
        buf.write("9\3:\3:\3:\3:\5:\u02e5\n:\3:\3:\5:\u02e9\n:\3:\5:\u02ec")
        buf.write("\n:\3:\3:\3:\3;\3;\5;\u02f3\n;\3;\3;\3;\3;\5;\u02f9\n")
        buf.write(";\3;\3;\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3?\3?\3")
        buf.write("?\3@\3@\5@\u030f\n@\3@\3@\3A\3A\3A\3B\3B\3B\3B\3C\3C\3")
        buf.write("C\3C\3D\3D\3D\3D\3D\3D\3D\5D\u0325\nD\3D\3D\5D\u0329\n")
        buf.write("D\3D\3D\3E\5E\u032e\nE\3E\3E\5E\u0332\nE\7E\u0334\nE\f")
        buf.write("E\16E\u0337\13E\3F\3F\5F\u033b\nF\3F\7F\u033e\nF\fF\16")
        buf.write("F\u0341\13F\3F\5F\u0344\nF\3F\3F\3G\3G\3H\3H\3H\3H\3H")
        buf.write("\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u035c\nH\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0392")
        buf.write("\nH\3H\3H\5H\u0396\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\7H\u03a6\nH\fH\16H\u03a9\13H\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\5I\u03b4\nI\3J\3J\3J\7J\u03b9\nJ\fJ\16J")
        buf.write("\u03bc\13J\3K\3K\3K\7K\u03c1\nK\fK\16K\u03c4\13K\3K\5")
        buf.write("K\u03c7\nK\3L\3L\3L\3L\3M\3M\5M\u03cf\nM\3M\3M\5M\u03d3")
        buf.write("\nM\5M\u03d5\nM\3N\3N\3N\3N\3N\3O\3O\3O\3O\7O\u03e0\n")
        buf.write("O\fO\16O\u03e3\13O\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\5P\u03f8\nP\3Q\3Q\3Q\5Q\u03fd\n")
        buf.write("Q\3R\3R\3R\3R\3S\3S\3S\3S\5S\u0407\nS\3S\3S\5S\u040b\n")
        buf.write("S\3S\3S\7S\u040f\nS\fS\16S\u0412\13S\3S\5S\u0415\nS\3")
        buf.write("T\3T\3T\3T\5T\u041b\nT\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\5V\u0428\nV\3W\3W\3W\7W\u042d\nW\fW\16W\u0430\13W\3")
        buf.write("X\3X\3X\3X\3Y\3Y\3Y\3Z\3Z\3Z\7Z\u043c\nZ\fZ\16Z\u043f")
        buf.write("\13Z\3[\3[\3[\3[\3[\3[\5[\u0447\n[\3\\\3\\\3\\\3\\\5\\")
        buf.write("\u044d\n\\\3\\\3\\\5\\\u0451\n\\\3\\\3\\\3]\3]\3]\3^\3")
        buf.write("^\3^\5^\u045b\n^\3^\3^\3^\5^\u0460\n^\3^\3^\3_\3_\3_\3")
        buf.write("_\3`\3`\3`\3`\3`\5`\u046d\n`\3a\3a\5a\u0471\na\3a\3a\5")
        buf.write("a\u0475\na\7a\u0477\na\fa\16a\u047a\13a\3a\3a\3a\3a\3")
        buf.write("a\7a\u0481\na\fa\16a\u0484\13a\5a\u0486\na\3a\5a\u0489")
        buf.write("\na\3b\3b\5b\u048d\nb\3c\3c\3d\6d\u0492\nd\rd\16d\u0493")
        buf.write("\3e\3e\3e\3e\3e\7e\u049b\ne\fe\16e\u049e\13e\3e\3e\5e")
        buf.write("\u04a2\ne\3f\6f\u04a5\nf\rf\16f\u04a6\3g\3g\3g\3g\7g\u04ad")
        buf.write("\ng\fg\16g\u04b0\13g\3g\3g\3h\3h\3h\3\u04ae\4N\u008ei")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\2\21\3\2\7\r\3\2\25\27\5\2\5\5\7\f\36%\3")
        buf.write("\2\62\64\6\2tt{{\177\177\u0081\u0081\5\2..ADgk\3\2EF\3")
        buf.write("\2 !\4\2\5\5\"#\3\2LM\3\2\t\f\3\2$%\4\2\r\rPY\3\2mn\f")
        buf.write("\2\20\20\33\33..\64\64@@aaww{{\u0082\u0083\u0085\u0086")
        buf.write("\2\u0544\2\u00df\3\2\2\2\4\u00e4\3\2\2\2\6\u00e9\3\2\2")
        buf.write("\2\b\u00ee\3\2\2\2\n\u00f0\3\2\2\2\f\u00fa\3\2\2\2\16")
        buf.write("\u0104\3\2\2\2\20\u0106\3\2\2\2\22\u012f\3\2\2\2\24\u0131")
        buf.write("\3\2\2\2\26\u0134\3\2\2\2\30\u014c\3\2\2\2\32\u015f\3")
        buf.write("\2\2\2\34\u0161\3\2\2\2\36\u0174\3\2\2\2 \u017b\3\2\2")
        buf.write("\2\"\u0180\3\2\2\2$\u0186\3\2\2\2&\u019e\3\2\2\2(\u01a0")
        buf.write("\3\2\2\2*\u01a5\3\2\2\2,\u01a7\3\2\2\2.\u01c1\3\2\2\2")
        buf.write("\60\u01d1\3\2\2\2\62\u01d9\3\2\2\2\64\u01ea\3\2\2\2\66")
        buf.write("\u01ec\3\2\2\28\u01f9\3\2\2\2:\u01fc\3\2\2\2<\u0204\3")
        buf.write("\2\2\2>\u0206\3\2\2\2@\u0215\3\2\2\2B\u0222\3\2\2\2D\u0229")
        buf.write("\3\2\2\2F\u0236\3\2\2\2H\u023d\3\2\2\2J\u024a\3\2\2\2")
        buf.write("L\u024e\3\2\2\2N\u025b\3\2\2\2P\u0268\3\2\2\2R\u0272\3")
        buf.write("\2\2\2T\u0274\3\2\2\2V\u0281\3\2\2\2X\u0283\3\2\2\2Z\u0285")
        buf.write("\3\2\2\2\\\u0293\3\2\2\2^\u0295\3\2\2\2`\u0297\3\2\2\2")
        buf.write("b\u02b1\3\2\2\2d\u02b3\3\2\2\2f\u02b6\3\2\2\2h\u02bf\3")
        buf.write("\2\2\2j\u02ca\3\2\2\2l\u02d3\3\2\2\2n\u02db\3\2\2\2p\u02dd")
        buf.write("\3\2\2\2r\u02e0\3\2\2\2t\u02f0\3\2\2\2v\u02fc\3\2\2\2")
        buf.write("x\u02fe\3\2\2\2z\u0306\3\2\2\2|\u0309\3\2\2\2~\u030c\3")
        buf.write("\2\2\2\u0080\u0312\3\2\2\2\u0082\u0315\3\2\2\2\u0084\u0319")
        buf.write("\3\2\2\2\u0086\u0324\3\2\2\2\u0088\u032d\3\2\2\2\u008a")
        buf.write("\u0338\3\2\2\2\u008c\u0347\3\2\2\2\u008e\u035b\3\2\2\2")
        buf.write("\u0090\u03b3\3\2\2\2\u0092\u03b5\3\2\2\2\u0094\u03bd\3")
        buf.write("\2\2\2\u0096\u03c8\3\2\2\2\u0098\u03d4\3\2\2\2\u009a\u03d6")
        buf.write("\3\2\2\2\u009c\u03db\3\2\2\2\u009e\u03f7\3\2\2\2\u00a0")
        buf.write("\u03fc\3\2\2\2\u00a2\u03fe\3\2\2\2\u00a4\u0406\3\2\2\2")
        buf.write("\u00a6\u0416\3\2\2\2\u00a8\u041c\3\2\2\2\u00aa\u0427\3")
        buf.write("\2\2\2\u00ac\u0429\3\2\2\2\u00ae\u0431\3\2\2\2\u00b0\u0435")
        buf.write("\3\2\2\2\u00b2\u0438\3\2\2\2\u00b4\u0446\3\2\2\2\u00b6")
        buf.write("\u0448\3\2\2\2\u00b8\u0454\3\2\2\2\u00ba\u0457\3\2\2\2")
        buf.write("\u00bc\u0463\3\2\2\2\u00be\u046c\3\2\2\2\u00c0\u0488\3")
        buf.write("\2\2\2\u00c2\u048a\3\2\2\2\u00c4\u048e\3\2\2\2\u00c6\u0491")
        buf.write("\3\2\2\2\u00c8\u0495\3\2\2\2\u00ca\u04a4\3\2\2\2\u00cc")
        buf.write("\u04a8\3\2\2\2\u00ce\u04b3\3\2\2\2\u00d0\u00de\5\4\3\2")
        buf.write("\u00d1\u00de\5\22\n\2\u00d2\u00de\5\26\f\2\u00d3\u00de")
        buf.write("\5> \2\u00d4\u00de\5:\36\2\u00d5\u00de\5,\27\2\u00d6\u00de")
        buf.write("\5\62\32\2\u00d7\u00de\5\36\20\2\u00d8\u00de\5 \21\2\u00d9")
        buf.write("\u00de\5\"\22\2\u00da\u00de\5$\23\2\u00db\u00de\5\u00cc")
        buf.write("g\2\u00dc\u00de\5\u00ceh\2\u00dd\u00d0\3\2\2\2\u00dd\u00d1")
        buf.write("\3\2\2\2\u00dd\u00d2\3\2\2\2\u00dd\u00d3\3\2\2\2\u00dd")
        buf.write("\u00d4\3\2\2\2\u00dd\u00d5\3\2\2\2\u00dd\u00d6\3\2\2\2")
        buf.write("\u00dd\u00d7\3\2\2\2\u00dd\u00d8\3\2\2\2\u00dd\u00d9\3")
        buf.write("\2\2\2\u00dd\u00da\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00dc")
        buf.write("\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2\u00df")
        buf.write("\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2\u00e1\u00df\3\2\2\2")
        buf.write("\u00e2\u00e3\7\2\2\3\u00e3\3\3\2\2\2\u00e4\u00e5\7\3\2")
        buf.write("\2\u00e5\u00e6\5\6\4\2\u00e6\u00e7\5\b\5\2\u00e7\u00e8")
        buf.write("\7\4\2\2\u00e8\5\3\2\2\2\u00e9\u00ea\5\u00c4c\2\u00ea")
        buf.write("\7\3\2\2\2\u00eb\u00ef\7\5\2\2\u00ec\u00ef\5\n\6\2\u00ed")
        buf.write("\u00ef\5\u008eH\2\u00ee\u00eb\3\2\2\2\u00ee\u00ec\3\2")
        buf.write("\2\2\u00ee\u00ed\3\2\2\2\u00ef\t\3\2\2\2\u00f0\u00f7\5")
        buf.write("\16\b\2\u00f1\u00f3\7\6\2\2\u00f2\u00f1\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\5\16\b")
        buf.write("\2\u00f5\u00f2\3\2\2\2\u00f6\u00f9\3\2\2\2\u00f7\u00f5")
        buf.write("\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\13\3\2\2\2\u00f9\u00f7")
        buf.write("\3\2\2\2\u00fa\u00fb\t\2\2\2\u00fb\r\3\2\2\2\u00fc\u00fe")
        buf.write("\5\f\7\2\u00fd\u00fc\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u00ff\3\2\2\2\u00ff\u0105\7\u0088\2\2\u0100\u0102\5\f")
        buf.write("\7\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\u0105\7m\2\2\u0104\u00fd\3\2\2\2\u0104")
        buf.write("\u0101\3\2\2\2\u0105\17\3\2\2\2\u0106\u0109\5\u00c4c\2")
        buf.write("\u0107\u0108\7\16\2\2\u0108\u010a\5\u00c4c\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a\21\3\2\2\2\u010b\u010c")
        buf.write("\7\17\2\2\u010c\u010f\5\24\13\2\u010d\u010e\7\16\2\2\u010e")
        buf.write("\u0110\5\u00c4c\2\u010f\u010d\3\2\2\2\u010f\u0110\3\2")
        buf.write("\2\2\u0110\u0111\3\2\2\2\u0111\u0112\7\4\2\2\u0112\u0130")
        buf.write("\3\2\2\2\u0113\u0116\7\17\2\2\u0114\u0117\7\5\2\2\u0115")
        buf.write("\u0117\5\u00c4c\2\u0116\u0114\3\2\2\2\u0116\u0115\3\2")
        buf.write("\2\2\u0117\u011a\3\2\2\2\u0118\u0119\7\16\2\2\u0119\u011b")
        buf.write("\5\u00c4c\2\u011a\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write("\u011c\3\2\2\2\u011c\u011d\7\20\2\2\u011d\u011e\5\24\13")
        buf.write("\2\u011e\u011f\7\4\2\2\u011f\u0130\3\2\2\2\u0120\u0121")
        buf.write("\7\17\2\2\u0121\u0122\7\21\2\2\u0122\u0127\5\20\t\2\u0123")
        buf.write("\u0124\7\22\2\2\u0124\u0126\5\20\t\2\u0125\u0123\3\2\2")
        buf.write("\2\u0126\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128")
        buf.write("\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u0127\3\2\2\2\u012a")
        buf.write("\u012b\7\23\2\2\u012b\u012c\7\20\2\2\u012c\u012d\5\24")
        buf.write("\13\2\u012d\u012e\7\4\2\2\u012e\u0130\3\2\2\2\u012f\u010b")
        buf.write("\3\2\2\2\u012f\u0113\3\2\2\2\u012f\u0120\3\2\2\2\u0130")
        buf.write("\23\3\2\2\2\u0131\u0132\7\u0087\2\2\u0132\25\3\2\2\2\u0133")
        buf.write("\u0135\7\24\2\2\u0134\u0133\3\2\2\2\u0134\u0135\3\2\2")
        buf.write("\2\u0135\u0136\3\2\2\2\u0136\u0137\t\3\2\2\u0137\u0141")
        buf.write("\5\u00c4c\2\u0138\u0139\7\30\2\2\u0139\u013e\5\30\r\2")
        buf.write("\u013a\u013b\7\22\2\2\u013b\u013d\5\30\r\2\u013c\u013a")
        buf.write("\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e")
        buf.write("\u013f\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e\3\2\2\2")
        buf.write("\u0141\u0138\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3")
        buf.write("\2\2\2\u0143\u0147\7\21\2\2\u0144\u0146\5\32\16\2\u0145")
        buf.write("\u0144\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2")
        buf.write("\u0147\u0148\3\2\2\2\u0148\u014a\3\2\2\2\u0149\u0147\3")
        buf.write("\2\2\2\u014a\u014b\7\23\2\2\u014b\27\3\2\2\2\u014c\u0152")
        buf.write("\5P)\2\u014d\u014f\7\31\2\2\u014e\u0150\5\u0092J\2\u014f")
        buf.write("\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2")
        buf.write("\u0151\u0153\7\32\2\2\u0152\u014d\3\2\2\2\u0152\u0153")
        buf.write("\3\2\2\2\u0153\31\3\2\2\2\u0154\u0160\5\34\17\2\u0155")
        buf.write("\u0160\5$\23\2\u0156\u0160\5,\27\2\u0157\u0160\5.\30\2")
        buf.write("\u0158\u0160\5\62\32\2\u0159\u0160\5:\36\2\u015a\u0160")
        buf.write("\5> \2\u015b\u0160\5 \21\2\u015c\u0160\5\"\22\2\u015d")
        buf.write("\u0160\5\u00ccg\2\u015e\u0160\5\u00ceh\2\u015f\u0154\3")
        buf.write("\2\2\2\u015f\u0155\3\2\2\2\u015f\u0156\3\2\2\2\u015f\u0157")
        buf.write("\3\2\2\2\u015f\u0158\3\2\2\2\u015f\u0159\3\2\2\2\u015f")
        buf.write("\u015a\3\2\2\2\u015f\u015b\3\2\2\2\u015f\u015c\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u015f\u015e\3\2\2\2\u0160\33\3\2")
        buf.write("\2\2\u0161\u016a\5N(\2\u0162\u0169\7}\2\2\u0163\u0169")
        buf.write("\7z\2\2\u0164\u0169\7|\2\2\u0165\u0169\7t\2\2\u0166\u0169")
        buf.write("\7u\2\2\u0167\u0169\5\u00c8e\2\u0168\u0162\3\2\2\2\u0168")
        buf.write("\u0163\3\2\2\2\u0168\u0164\3\2\2\2\u0168\u0165\3\2\2\2")
        buf.write("\u0168\u0166\3\2\2\2\u0168\u0167\3\2\2\2\u0169\u016c\3")
        buf.write("\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d")
        buf.write("\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u0170\5\u00c4c\2\u016e")
        buf.write("\u016f\7\r\2\2\u016f\u0171\5\u008eH\2\u0170\u016e\3\2")
        buf.write("\2\2\u0170\u0171\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0173")
        buf.write("\7\4\2\2\u0173\35\3\2\2\2\u0174\u0175\5N(\2\u0175\u0176")
        buf.write("\7t\2\2\u0176\u0177\5\u00c4c\2\u0177\u0178\7\r\2\2\u0178")
        buf.write("\u0179\5\u008eH\2\u0179\u017a\7\4\2\2\u017a\37\3\2\2\2")
        buf.write("\u017b\u017c\7\33\2\2\u017c\u017d\5\u00c4c\2\u017d\u017e")
        buf.write("\5@!\2\u017e\u017f\7\4\2\2\u017f!\3\2\2\2\u0180\u0181")
        buf.write("\7\u0080\2\2\u0181\u0182\5\u00c4c\2\u0182\u0183\7\30\2")
        buf.write("\2\u0183\u0184\5\u008cG\2\u0184\u0185\7\4\2\2\u0185#\3")
        buf.write("\2\2\2\u0186\u0187\7\34\2\2\u0187\u0188\5&\24\2\u0188")
        buf.write("\u018b\7\35\2\2\u0189\u018c\7\5\2\2\u018a\u018c\5N(\2")
        buf.write("\u018b\u0189\3\2\2\2\u018b\u018a\3\2\2\2\u018c\u018e\3")
        buf.write("\2\2\2\u018d\u018f\7\u0082\2\2\u018e\u018d\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\7\4\2\2")
        buf.write("\u0191%\3\2\2\2\u0192\u019f\5P)\2\u0193\u0194\7\21\2\2")
        buf.write("\u0194\u0199\5(\25\2\u0195\u0196\7\22\2\2\u0196\u0198")
        buf.write("\5(\25\2\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199")
        buf.write("\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019c\u019d\7\23\2\2\u019d\u019f")
        buf.write("\3\2\2\2\u019e\u0192\3\2\2\2\u019e\u0193\3\2\2\2\u019f")
        buf.write("\'\3\2\2\2\u01a0\u01a3\5P)\2\u01a1\u01a2\7\16\2\2\u01a2")
        buf.write("\u01a4\5*\26\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4)\3\2\2\2\u01a5\u01a6\t\4\2\2\u01a6+\3\2\2\2\u01a7")
        buf.write("\u01a8\7&\2\2\u01a8\u01a9\5\u00c4c\2\u01a9\u01bd\7\21")
        buf.write("\2\2\u01aa\u01ad\5\u00ccg\2\u01ab\u01ad\5\u00ceh\2\u01ac")
        buf.write("\u01aa\3\2\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2")
        buf.write("\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3")
        buf.write("\2\2\2\u01b0\u01ae\3\2\2\2\u01b1\u01b2\5L\'\2\u01b2\u01ba")
        buf.write("\7\4\2\2\u01b3\u01b9\5\u00ccg\2\u01b4\u01b9\5\u00ceh\2")
        buf.write("\u01b5\u01b6\5L\'\2\u01b6\u01b7\7\4\2\2\u01b7\u01b9\3")
        buf.write("\2\2\2\u01b8\u01b3\3\2\2\2\u01b8\u01b4\3\2\2\2\u01b8\u01b5")
        buf.write("\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2")
        buf.write("\u01bd\u01ae\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\3")
        buf.write("\2\2\2\u01bf\u01c0\7\23\2\2\u01c0-\3\2\2\2\u01c1\u01c2")
        buf.write("\7\'\2\2\u01c2\u01c4\5\u00c4c\2\u01c3\u01c5\5@!\2\u01c4")
        buf.write("\u01c3\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01ca\3\2\2\2")
        buf.write("\u01c6\u01c9\7~\2\2\u01c7\u01c9\5\u00c8e\2\u01c8\u01c6")
        buf.write("\3\2\2\2\u01c8\u01c7\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca")
        buf.write("\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cf\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cd\u01d0\7\4\2\2\u01ce\u01d0\5")
        buf.write("`\61\2\u01cf\u01cd\3\2\2\2\u01cf\u01ce\3\2\2\2\u01d0/")
        buf.write("\3\2\2\2\u01d1\u01d7\5\u00c4c\2\u01d2\u01d4\7\31\2\2\u01d3")
        buf.write("\u01d5\5\u0092J\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2")
        buf.write("\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d8\7\32\2\2\u01d7\u01d2")
        buf.write("\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\61\3\2\2\2\u01d9\u01da")
        buf.write("\5\64\33\2\u01da\u01db\5@!\2\u01db\u01dd\58\35\2\u01dc")
        buf.write("\u01de\5\66\34\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2")
        buf.write("\2\u01de\u01e1\3\2\2\2\u01df\u01e2\7\4\2\2\u01e0\u01e2")
        buf.write("\5`\61\2\u01e1\u01df\3\2\2\2\u01e1\u01e0\3\2\2\2\u01e2")
        buf.write("\63\3\2\2\2\u01e3\u01e5\7(\2\2\u01e4\u01e6\5\u00c4c\2")
        buf.write("\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01eb\3")
        buf.write("\2\2\2\u01e7\u01eb\7\u0083\2\2\u01e8\u01eb\7\u0084\2\2")
        buf.write("\u01e9\u01eb\7\u0085\2\2\u01ea\u01e3\3\2\2\2\u01ea\u01e7")
        buf.write("\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb")
        buf.write("\65\3\2\2\2\u01ec\u01ed\7)\2\2\u01ed\u01ee\5@!\2\u01ee")
        buf.write("\67\3\2\2\2\u01ef\u01f8\7x\2\2\u01f0\u01f8\7}\2\2\u01f1")
        buf.write("\u01f8\7z\2\2\u01f2\u01f8\7|\2\2\u01f3\u01f8\7~\2\2\u01f4")
        buf.write("\u01f8\5^\60\2\u01f5\u01f8\5\60\31\2\u01f6\u01f8\5\u00c8")
        buf.write("e\2\u01f7\u01ef\3\2\2\2\u01f7\u01f0\3\2\2\2\u01f7\u01f1")
        buf.write("\3\2\2\2\u01f7\u01f2\3\2\2\2\u01f7\u01f3\3\2\2\2\u01f7")
        buf.write("\u01f4\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f6\3\2\2\2")
        buf.write("\u01f8\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3")
        buf.write("\2\2\2\u01fa9\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fd")
        buf.write("\7*\2\2\u01fd\u01fe\5\u00c4c\2\u01fe\u0200\5D#\2\u01ff")
        buf.write("\u0201\7r\2\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2")
        buf.write("\u0201\u0202\3\2\2\2\u0202\u0203\7\4\2\2\u0203;\3\2\2")
        buf.write("\2\u0204\u0205\5\u00c4c\2\u0205=\3\2\2\2\u0206\u0207\7")
        buf.write("+\2\2\u0207\u0208\5\u00c4c\2\u0208\u020a\7\21\2\2\u0209")
        buf.write("\u020b\5<\37\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2")
        buf.write("\u020b\u0210\3\2\2\2\u020c\u020d\7\22\2\2\u020d\u020f")
        buf.write("\5<\37\2\u020e\u020c\3\2\2\2\u020f\u0212\3\2\2\2\u0210")
        buf.write("\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0213\3\2\2\2")
        buf.write("\u0212\u0210\3\2\2\2\u0213\u0214\7\23\2\2\u0214?\3\2\2")
        buf.write("\2\u0215\u021e\7\31\2\2\u0216\u021b\5B\"\2\u0217\u0218")
        buf.write("\7\22\2\2\u0218\u021a\5B\"\2\u0219\u0217\3\2\2\2\u021a")
        buf.write("\u021d\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2\u021e\u0216\3")
        buf.write("\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221")
        buf.write("\7\32\2\2\u0221A\3\2\2\2\u0222\u0224\5N(\2\u0223\u0225")
        buf.write("\5\\/\2\u0224\u0223\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0227\3\2\2\2\u0226\u0228\5\u00c4c\2\u0227\u0226\3\2")
        buf.write("\2\2\u0227\u0228\3\2\2\2\u0228C\3\2\2\2\u0229\u0232\7")
        buf.write("\31\2\2\u022a\u022f\5F$\2\u022b\u022c\7\22\2\2\u022c\u022e")
        buf.write("\5F$\2\u022d\u022b\3\2\2\2\u022e\u0231\3\2\2\2\u022f\u022d")
        buf.write("\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0233\3\2\2\2\u0231")
        buf.write("\u022f\3\2\2\2\u0232\u022a\3\2\2\2\u0232\u0233\3\2\2\2")
        buf.write("\u0233\u0234\3\2\2\2\u0234\u0235\7\32\2\2\u0235E\3\2\2")
        buf.write("\2\u0236\u0238\5N(\2\u0237\u0239\7y\2\2\u0238\u0237\3")
        buf.write("\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u023c")
        buf.write("\5\u00c4c\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write("G\3\2\2\2\u023d\u0246\7\31\2\2\u023e\u0243\5J&\2\u023f")
        buf.write("\u0240\7\22\2\2\u0240\u0242\5J&\2\u0241\u023f\3\2\2\2")
        buf.write("\u0242\u0245\3\2\2\2\u0243\u0241\3\2\2\2\u0243\u0244\3")
        buf.write("\2\2\2\u0244\u0247\3\2\2\2\u0245\u0243\3\2\2\2\u0246\u023e")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u0249\7\32\2\2\u0249I\3\2\2\2\u024a\u024c\5N(\2\u024b")
        buf.write("\u024d\5\\/\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2")
        buf.write("\u024dK\3\2\2\2\u024e\u0250\5N(\2\u024f\u0251\5\\/\2\u0250")
        buf.write("\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252\u0253\5\u00c4c\2\u0253M\3\2\2\2\u0254\u0255\b(")
        buf.write("\1\2\u0255\u025c\5\u008cG\2\u0256\u025c\5P)\2\u0257\u025c")
        buf.write("\5T+\2\u0258\u025c\5Z.\2\u0259\u025a\7.\2\2\u025a\u025c")
        buf.write("\7{\2\2\u025b\u0254\3\2\2\2\u025b\u0256\3\2\2\2\u025b")
        buf.write("\u0257\3\2\2\2\u025b\u0258\3\2\2\2\u025b\u0259\3\2\2\2")
        buf.write("\u025c\u0265\3\2\2\2\u025d\u025e\f\5\2\2\u025e\u0260\7")
        buf.write(",\2\2\u025f\u0261\5\u008eH\2\u0260\u025f\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\7-\2\2")
        buf.write("\u0263\u025d\3\2\2\2\u0264\u0267\3\2\2\2\u0265\u0263\3")
        buf.write("\2\2\2\u0265\u0266\3\2\2\2\u0266O\3\2\2\2\u0267\u0265")
        buf.write("\3\2\2\2\u0268\u026d\5\u00c4c\2\u0269\u026a\7/\2\2\u026a")
        buf.write("\u026c\5\u00c4c\2\u026b\u0269\3\2\2\2\u026c\u026f\3\2")
        buf.write("\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026eQ\3")
        buf.write("\2\2\2\u026f\u026d\3\2\2\2\u0270\u0273\5\u008cG\2\u0271")
        buf.write("\u0273\5P)\2\u0272\u0270\3\2\2\2\u0272\u0271\3\2\2\2\u0273")
        buf.write("S\3\2\2\2\u0274\u0275\7\60\2\2\u0275\u0276\7\31\2\2\u0276")
        buf.write("\u0278\5R*\2\u0277\u0279\5V,\2\u0278\u0277\3\2\2\2\u0278")
        buf.write("\u0279\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\7\61\2")
        buf.write("\2\u027b\u027d\5N(\2\u027c\u027e\5X-\2\u027d\u027c\3\2")
        buf.write("\2\2\u027d\u027e\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0280")
        buf.write("\7\32\2\2\u0280U\3\2\2\2\u0281\u0282\5\u00c4c\2\u0282")
        buf.write("W\3\2\2\2\u0283\u0284\5\u00c4c\2\u0284Y\3\2\2\2\u0285")
        buf.write("\u0286\7(\2\2\u0286\u028c\5H%\2\u0287\u028b\7z\2\2\u0288")
        buf.write("\u028b\7x\2\2\u0289\u028b\5^\60\2\u028a\u0287\3\2\2\2")
        buf.write("\u028a\u0288\3\2\2\2\u028a\u0289\3\2\2\2\u028b\u028e\3")
        buf.write("\2\2\2\u028c\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u0291")
        buf.write("\3\2\2\2\u028e\u028c\3\2\2\2\u028f\u0290\7)\2\2\u0290")
        buf.write("\u0292\5H%\2\u0291\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292")
        buf.write("[\3\2\2\2\u0293\u0294\t\5\2\2\u0294]\3\2\2\2\u0295\u0296")
        buf.write("\t\6\2\2\u0296_\3\2\2\2\u0297\u029b\7\21\2\2\u0298\u029a")
        buf.write("\5b\62\2\u0299\u0298\3\2\2\2\u029a\u029d\3\2\2\2\u029b")
        buf.write("\u0299\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2")
        buf.write("\u029d\u029b\3\2\2\2\u029e\u029f\7\23\2\2\u029fa\3\2\2")
        buf.write("\2\u02a0\u02b2\5f\64\2\u02a1\u02b2\5h\65\2\u02a2\u02b2")
        buf.write("\5l\67\2\u02a3\u02b2\5r:\2\u02a4\u02b2\5`\61\2\u02a5\u02b2")
        buf.write("\5t;\2\u02a6\u02b2\5x=\2\u02a7\u02b2\5z>\2\u02a8\u02b2")
        buf.write("\5|?\2\u02a9\u02b2\5~@\2\u02aa\u02b2\5\u0080A\2\u02ab")
        buf.write("\u02b2\5\u0082B\2\u02ac\u02b2\5n8\2\u02ad\u02b2\5p9\2")
        buf.write("\u02ae\u02b2\5\u0084C\2\u02af\u02b2\5\u00ccg\2\u02b0\u02b2")
        buf.write("\5\u00ceh\2\u02b1\u02a0\3\2\2\2\u02b1\u02a1\3\2\2\2\u02b1")
        buf.write("\u02a2\3\2\2\2\u02b1\u02a3\3\2\2\2\u02b1\u02a4\3\2\2\2")
        buf.write("\u02b1\u02a5\3\2\2\2\u02b1\u02a6\3\2\2\2\u02b1\u02a7\3")
        buf.write("\2\2\2\u02b1\u02a8\3\2\2\2\u02b1\u02a9\3\2\2\2\u02b1\u02aa")
        buf.write("\3\2\2\2\u02b1\u02ab\3\2\2\2\u02b1\u02ac\3\2\2\2\u02b1")
        buf.write("\u02ad\3\2\2\2\u02b1\u02ae\3\2\2\2\u02b1\u02af\3\2\2\2")
        buf.write("\u02b1\u02b0\3\2\2\2\u02b2c\3\2\2\2\u02b3\u02b4\5\u008e")
        buf.write("H\2\u02b4\u02b5\7\4\2\2\u02b5e\3\2\2\2\u02b6\u02b7\7\65")
        buf.write("\2\2\u02b7\u02b8\7\31\2\2\u02b8\u02b9\5\u008eH\2\u02b9")
        buf.write("\u02ba\7\32\2\2\u02ba\u02bd\5b\62\2\u02bb\u02bc\7\66\2")
        buf.write("\2\u02bc\u02be\5b\62\2\u02bd\u02bb\3\2\2\2\u02bd\u02be")
        buf.write("\3\2\2\2\u02beg\3\2\2\2\u02bf\u02c0\7\67\2\2\u02c0\u02c2")
        buf.write("\5\u008eH\2\u02c1\u02c3\5\66\34\2\u02c2\u02c1\3\2\2\2")
        buf.write("\u02c2\u02c3\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\u02c6\5")
        buf.write("`\61\2\u02c5\u02c7\5j\66\2\u02c6\u02c5\3\2\2\2\u02c7\u02c8")
        buf.write("\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9")
        buf.write("i\3\2\2\2\u02ca\u02cf\78\2\2\u02cb\u02cd\5\u00c4c\2\u02cc")
        buf.write("\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\3\2\2\2")
        buf.write("\u02ce\u02d0\5@!\2\u02cf\u02cc\3\2\2\2\u02cf\u02d0\3\2")
        buf.write("\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\5`\61\2\u02d2k\3")
        buf.write("\2\2\2\u02d3\u02d4\79\2\2\u02d4\u02d5\7\31\2\2\u02d5\u02d6")
        buf.write("\5\u008eH\2\u02d6\u02d7\7\32\2\2\u02d7\u02d8\5b\62\2\u02d8")
        buf.write("m\3\2\2\2\u02d9\u02dc\5\u0086D\2\u02da\u02dc\5d\63\2\u02db")
        buf.write("\u02d9\3\2\2\2\u02db\u02da\3\2\2\2\u02dco\3\2\2\2\u02dd")
        buf.write("\u02de\7:\2\2\u02de\u02df\5`\61\2\u02dfq\3\2\2\2\u02e0")
        buf.write("\u02e1\7\35\2\2\u02e1\u02e4\7\31\2\2\u02e2\u02e5\5n8\2")
        buf.write("\u02e3\u02e5\7\4\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e3\3")
        buf.write("\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e9\5d\63\2\u02e7\u02e9")
        buf.write("\7\4\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e7\3\2\2\2\u02e9")
        buf.write("\u02eb\3\2\2\2\u02ea\u02ec\5\u008eH\2\u02eb\u02ea\3\2")
        buf.write("\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee")
        buf.write("\7\32\2\2\u02ee\u02ef\5b\62\2\u02efs\3\2\2\2\u02f0\u02f2")
        buf.write("\7;\2\2\u02f1\u02f3\7\u0087\2\2\u02f2\u02f1\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f8\3\2\2\2\u02f4\u02f5\7\31\2")
        buf.write("\2\u02f5\u02f6\5v<\2\u02f6\u02f7\7\32\2\2\u02f7\u02f9")
        buf.write("\3\2\2\2\u02f8\u02f4\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fb\5\u009cO\2\u02fbu\3\2\2\2\u02fc")
        buf.write("\u02fd\5\u00caf\2\u02fdw\3\2\2\2\u02fe\u02ff\7<\2\2\u02ff")
        buf.write("\u0300\5b\62\2\u0300\u0301\79\2\2\u0301\u0302\7\31\2\2")
        buf.write("\u0302\u0303\5\u008eH\2\u0303\u0304\7\32\2\2\u0304\u0305")
        buf.write("\7\4\2\2\u0305y\3\2\2\2\u0306\u0307\7v\2\2\u0307\u0308")
        buf.write("\7\4\2\2\u0308{\3\2\2\2\u0309\u030a\7s\2\2\u030a\u030b")
        buf.write("\7\4\2\2\u030b}\3\2\2\2\u030c\u030e\7=\2\2\u030d\u030f")
        buf.write("\5\u008eH\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0311\7\4\2\2\u0311\177\3\2\2\2\u0312")
        buf.write("\u0313\7>\2\2\u0313\u0314\7\4\2\2\u0314\u0081\3\2\2\2")
        buf.write("\u0315\u0316\7?\2\2\u0316\u0317\5\u009aN\2\u0317\u0318")
        buf.write("\7\4\2\2\u0318\u0083\3\2\2\2\u0319\u031a\7@\2\2\u031a")
        buf.write("\u031b\5\u009aN\2\u031b\u031c\7\4\2\2\u031c\u0085\3\2")
        buf.write("\2\2\u031d\u031e\7A\2\2\u031e\u0325\5\u008aF\2\u031f\u0325")
        buf.write("\5L\'\2\u0320\u0321\7\31\2\2\u0321\u0322\5\u0088E\2\u0322")
        buf.write("\u0323\7\32\2\2\u0323\u0325\3\2\2\2\u0324\u031d\3\2\2")
        buf.write("\2\u0324\u031f\3\2\2\2\u0324\u0320\3\2\2\2\u0325\u0328")
        buf.write("\3\2\2\2\u0326\u0327\7\r\2\2\u0327\u0329\5\u008eH\2\u0328")
        buf.write("\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u032b\7\4\2\2\u032b\u0087\3\2\2\2\u032c\u032e\5")
        buf.write("L\'\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0335")
        buf.write("\3\2\2\2\u032f\u0331\7\22\2\2\u0330\u0332\5L\'\2\u0331")
        buf.write("\u0330\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0334\3\2\2\2")
        buf.write("\u0333\u032f\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3")
        buf.write("\2\2\2\u0335\u0336\3\2\2\2\u0336\u0089\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0338\u033f\7\31\2\2\u0339\u033b\5\u00c4c\2\u033a")
        buf.write("\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write("\u033c\u033e\7\22\2\2\u033d\u033a\3\2\2\2\u033e\u0341")
        buf.write("\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340")
        buf.write("\u0343\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0344\5\u00c4")
        buf.write("c\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345")
        buf.write("\3\2\2\2\u0345\u0346\7\32\2\2\u0346\u008b\3\2\2\2\u0347")
        buf.write("\u0348\t\7\2\2\u0348\u008d\3\2\2\2\u0349\u034a\bH\1\2")
        buf.write("\u034a\u034b\7G\2\2\u034b\u035c\5N(\2\u034c\u034d\7\31")
        buf.write("\2\2\u034d\u034e\5\u008eH\2\u034e\u034f\7\32\2\2\u034f")
        buf.write("\u035c\3\2\2\2\u0350\u0351\t\b\2\2\u0351\u035c\5\u008e")
        buf.write("H\25\u0352\u0353\t\t\2\2\u0353\u035c\5\u008eH\24\u0354")
        buf.write("\u0355\7I\2\2\u0355\u035c\5\u008eH\23\u0356\u0357\7J\2")
        buf.write("\2\u0357\u035c\5\u008eH\22\u0358\u0359\7\b\2\2\u0359\u035c")
        buf.write("\5\u008eH\21\u035a\u035c\5\u0090I\2\u035b\u0349\3\2\2")
        buf.write("\2\u035b\u034c\3\2\2\2\u035b\u0350\3\2\2\2\u035b\u0352")
        buf.write("\3\2\2\2\u035b\u0354\3\2\2\2\u035b\u0356\3\2\2\2\u035b")
        buf.write("\u0358\3\2\2\2\u035b\u035a\3\2\2\2\u035c\u03a7\3\2\2\2")
        buf.write("\u035d\u035e\f\20\2\2\u035e\u035f\7K\2\2\u035f\u03a6\5")
        buf.write("\u008eH\20\u0360\u0361\f\17\2\2\u0361\u0362\t\n\2\2\u0362")
        buf.write("\u03a6\5\u008eH\20\u0363\u0364\f\16\2\2\u0364\u0365\t")
        buf.write("\t\2\2\u0365\u03a6\5\u008eH\17\u0366\u0367\f\r\2\2\u0367")
        buf.write("\u0368\t\13\2\2\u0368\u03a6\5\u008eH\16\u0369\u036a\f")
        buf.write("\f\2\2\u036a\u036b\7\37\2\2\u036b\u03a6\5\u008eH\r\u036c")
        buf.write("\u036d\f\13\2\2\u036d\u036e\7\7\2\2\u036e\u03a6\5\u008e")
        buf.write("H\f\u036f\u0370\f\n\2\2\u0370\u0371\7\36\2\2\u0371\u03a6")
        buf.write("\5\u008eH\13\u0372\u0373\f\t\2\2\u0373\u0374\t\f\2\2\u0374")
        buf.write("\u03a6\5\u008eH\n\u0375\u0376\f\b\2\2\u0376\u0377\t\r")
        buf.write("\2\2\u0377\u03a6\5\u008eH\t\u0378\u0379\f\7\2\2\u0379")
        buf.write("\u037a\7N\2\2\u037a\u03a6\5\u008eH\b\u037b\u037c\f\6\2")
        buf.write("\2\u037c\u037d\7\6\2\2\u037d\u03a6\5\u008eH\7\u037e\u037f")
        buf.write("\f\5\2\2\u037f\u0380\7O\2\2\u0380\u0381\5\u008eH\2\u0381")
        buf.write("\u0382\7H\2\2\u0382\u0383\5\u008eH\5\u0383\u03a6\3\2\2")
        buf.write("\2\u0384\u0385\f\4\2\2\u0385\u0386\t\16\2\2\u0386\u03a6")
        buf.write("\5\u008eH\5\u0387\u0388\f\35\2\2\u0388\u03a6\t\b\2\2\u0389")
        buf.write("\u038a\f\33\2\2\u038a\u038b\7,\2\2\u038b\u038c\5\u008e")
        buf.write("H\2\u038c\u038d\7-\2\2\u038d\u03a6\3\2\2\2\u038e\u038f")
        buf.write("\f\32\2\2\u038f\u0391\7,\2\2\u0390\u0392\5\u008eH\2\u0391")
        buf.write("\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2")
        buf.write("\u0393\u0395\7H\2\2\u0394\u0396\5\u008eH\2\u0395\u0394")
        buf.write("\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u03a6\7-\2\2\u0398\u0399\f\31\2\2\u0399\u039a\7/\2\2")
        buf.write("\u039a\u03a6\5\u00c4c\2\u039b\u039c\f\30\2\2\u039c\u039d")
        buf.write("\7\21\2\2\u039d\u039e\5\u0094K\2\u039e\u039f\7\23\2\2")
        buf.write("\u039f\u03a6\3\2\2\2\u03a0\u03a1\f\27\2\2\u03a1\u03a2")
        buf.write("\7\31\2\2\u03a2\u03a3\5\u0098M\2\u03a3\u03a4\7\32\2\2")
        buf.write("\u03a4\u03a6\3\2\2\2\u03a5\u035d\3\2\2\2\u03a5\u0360\3")
        buf.write("\2\2\2\u03a5\u0363\3\2\2\2\u03a5\u0366\3\2\2\2\u03a5\u0369")
        buf.write("\3\2\2\2\u03a5\u036c\3\2\2\2\u03a5\u036f\3\2\2\2\u03a5")
        buf.write("\u0372\3\2\2\2\u03a5\u0375\3\2\2\2\u03a5\u0378\3\2\2\2")
        buf.write("\u03a5\u037b\3\2\2\2\u03a5\u037e\3\2\2\2\u03a5\u0384\3")
        buf.write("\2\2\2\u03a5\u0387\3\2\2\2\u03a5\u0389\3\2\2\2\u03a5\u038e")
        buf.write("\3\2\2\2\u03a5\u0398\3\2\2\2\u03a5\u039b\3\2\2\2\u03a5")
        buf.write("\u03a0\3\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2")
        buf.write("\u03a7\u03a8\3\2\2\2\u03a8\u008f\3\2\2\2\u03a9\u03a7\3")
        buf.write("\2\2\2\u03aa\u03b4\7l\2\2\u03ab\u03b4\5\u00c2b\2\u03ac")
        buf.write("\u03b4\5\u00c6d\2\u03ad\u03b4\5\u00caf\2\u03ae\u03b4\5")
        buf.write("\u00c4c\2\u03af\u03b4\7\u0080\2\2\u03b0\u03b4\7{\2\2\u03b1")
        buf.write("\u03b4\5\u00c0a\2\u03b2\u03b4\5N(\2\u03b3\u03aa\3\2\2")
        buf.write("\2\u03b3\u03ab\3\2\2\2\u03b3\u03ac\3\2\2\2\u03b3\u03ad")
        buf.write("\3\2\2\2\u03b3\u03ae\3\2\2\2\u03b3\u03af\3\2\2\2\u03b3")
        buf.write("\u03b0\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b2\3\2\2\2")
        buf.write("\u03b4\u0091\3\2\2\2\u03b5\u03ba\5\u008eH\2\u03b6\u03b7")
        buf.write("\7\22\2\2\u03b7\u03b9\5\u008eH\2\u03b8\u03b6\3\2\2\2\u03b9")
        buf.write("\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u0093\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03c2\5")
        buf.write("\u0096L\2\u03be\u03bf\7\22\2\2\u03bf\u03c1\5\u0096L\2")
        buf.write("\u03c0\u03be\3\2\2\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3")
        buf.write("\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c6\3\2\2\2\u03c4\u03c2")
        buf.write("\3\2\2\2\u03c5\u03c7\7\22\2\2\u03c6\u03c5\3\2\2\2\u03c6")
        buf.write("\u03c7\3\2\2\2\u03c7\u0095\3\2\2\2\u03c8\u03c9\5\u00c4")
        buf.write("c\2\u03c9\u03ca\7H\2\2\u03ca\u03cb\5\u008eH\2\u03cb\u0097")
        buf.write("\3\2\2\2\u03cc\u03ce\7\21\2\2\u03cd\u03cf\5\u0094K\2\u03ce")
        buf.write("\u03cd\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u03d5\7\23\2\2\u03d1\u03d3\5\u0092J\2\u03d2\u03d1")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\3\2\2\2\u03d4")
        buf.write("\u03cc\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u0099\3\2\2\2")
        buf.write("\u03d6\u03d7\5\u008eH\2\u03d7\u03d8\7\31\2\2\u03d8\u03d9")
        buf.write("\5\u0098M\2\u03d9\u03da\7\32\2\2\u03da\u009b\3\2\2\2\u03db")
        buf.write("\u03e1\7\21\2\2\u03dc\u03e0\5\u00ceh\2\u03dd\u03e0\5\u00cc")
        buf.write("g\2\u03de\u03e0\5\u009eP\2\u03df\u03dc\3\2\2\2\u03df\u03dd")
        buf.write("\3\2\2\2\u03df\u03de\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1")
        buf.write("\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e4\3\2\2\2")
        buf.write("\u03e3\u03e1\3\2\2\2\u03e4\u03e5\7\23\2\2\u03e5\u009d")
        buf.write("\3\2\2\2\u03e6\u03f8\5\u00c4c\2\u03e7\u03f8\5\u009cO\2")
        buf.write("\u03e8\u03f8\5\u00a0Q\2\u03e9\u03f8\5\u00a6T\2\u03ea\u03f8")
        buf.write("\5\u00a8U\2\u03eb\u03f8\5\u00aeX\2\u03ec\u03f8\5\u00b0")
        buf.write("Y\2\u03ed\u03f8\5\u00b2Z\2\u03ee\u03f8\5\u00b6\\\2\u03ef")
        buf.write("\u03f8\5\u00ba^\2\u03f0\u03f8\5\u00bc_\2\u03f1\u03f8\7")
        buf.write("s\2\2\u03f2\u03f8\7v\2\2\u03f3\u03f8\7w\2\2\u03f4\u03f8")
        buf.write("\5\u00c2b\2\u03f5\u03f8\5\u00caf\2\u03f6\u03f8\5\u00c6")
        buf.write("d\2\u03f7\u03e6\3\2\2\2\u03f7\u03e7\3\2\2\2\u03f7\u03e8")
        buf.write("\3\2\2\2\u03f7\u03e9\3\2\2\2\u03f7\u03ea\3\2\2\2\u03f7")
        buf.write("\u03eb\3\2\2\2\u03f7\u03ec\3\2\2\2\u03f7\u03ed\3\2\2\2")
        buf.write("\u03f7\u03ee\3\2\2\2\u03f7\u03ef\3\2\2\2\u03f7\u03f0\3")
        buf.write("\2\2\2\u03f7\u03f1\3\2\2\2\u03f7\u03f2\3\2\2\2\u03f7\u03f3")
        buf.write("\3\2\2\2\u03f7\u03f4\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7")
        buf.write("\u03f6\3\2\2\2\u03f8\u009f\3\2\2\2\u03f9\u03fd\5\u00a4")
        buf.write("S\2\u03fa\u03fd\5\u00be`\2\u03fb\u03fd\5\u00a2R\2\u03fc")
        buf.write("\u03f9\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fb\3\2\2\2")
        buf.write("\u03fd\u00a1\3\2\2\2\u03fe\u03ff\5\u00c4c\2\u03ff\u0400")
        buf.write("\7/\2\2\u0400\u0401\5\u00c4c\2\u0401\u00a3\3\2\2\2\u0402")
        buf.write("\u0407\7=\2\2\u0403\u0407\7.\2\2\u0404\u0407\7D\2\2\u0405")
        buf.write("\u0407\5\u00c4c\2\u0406\u0402\3\2\2\2\u0406\u0403\3\2")
        buf.write("\2\2\u0406\u0404\3\2\2\2\u0406\u0405\3\2\2\2\u0407\u0414")
        buf.write("\3\2\2\2\u0408\u040a\7\31\2\2\u0409\u040b\5\u00a0Q\2\u040a")
        buf.write("\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u0410\3\2\2\2")
        buf.write("\u040c\u040d\7\22\2\2\u040d\u040f\5\u00a0Q\2\u040e\u040c")
        buf.write("\3\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410")
        buf.write("\u0411\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0413\u0415\7\32\2\2\u0414\u0408\3\2\2\2\u0414\u0415")
        buf.write("\3\2\2\2\u0415\u00a5\3\2\2\2\u0416\u0417\7Z\2\2\u0417")
        buf.write("\u041a\5\u00aaV\2\u0418\u0419\7[\2\2\u0419\u041b\5\u00a0")
        buf.write("Q\2\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u00a7")
        buf.write("\3\2\2\2\u041c\u041d\5\u00aaV\2\u041d\u041e\7[\2\2\u041e")
        buf.write("\u041f\5\u00a0Q\2\u041f\u00a9\3\2\2\2\u0420\u0428\5\u00c4")
        buf.write("c\2\u0421\u0428\5\u00a2R\2\u0422\u0428\5\u00acW\2\u0423")
        buf.write("\u0424\7\31\2\2\u0424\u0425\5\u00acW\2\u0425\u0426\7\32")
        buf.write("\2\2\u0426\u0428\3\2\2\2\u0427\u0420\3\2\2\2\u0427\u0421")
        buf.write("\3\2\2\2\u0427\u0422\3\2\2\2\u0427\u0423\3\2\2\2\u0428")
        buf.write("\u00ab\3\2\2\2\u0429\u042e\5\u00c4c\2\u042a\u042b\7\22")
        buf.write("\2\2\u042b\u042d\5\u00c4c\2\u042c\u042a\3\2\2\2\u042d")
        buf.write("\u0430\3\2\2\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write("\u042f\u00ad\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0432\5")
        buf.write("\u00a0Q\2\u0432\u0433\7\\\2\2\u0433\u0434\5\u00c4c\2\u0434")
        buf.write("\u00af\3\2\2\2\u0435\u0436\5\u00c4c\2\u0436\u0437\7H\2")
        buf.write("\2\u0437\u00b1\3\2\2\2\u0438\u0439\7]\2\2\u0439\u043d")
        buf.write("\5\u00a0Q\2\u043a\u043c\5\u00b4[\2\u043b\u043a\3\2\2\2")
        buf.write("\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3")
        buf.write("\2\2\2\u043e\u00b3\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0441")
        buf.write("\7^\2\2\u0441\u0442\5\u00be`\2\u0442\u0443\5\u009cO\2")
        buf.write("\u0443\u0447\3\2\2\2\u0444\u0445\7_\2\2\u0445\u0447\5")
        buf.write("\u009cO\2\u0446\u0440\3\2\2\2\u0446\u0444\3\2\2\2\u0447")
        buf.write("\u00b5\3\2\2\2\u0448\u0449\7(\2\2\u0449\u044a\5\u00c4")
        buf.write("c\2\u044a\u044c\7\31\2\2\u044b\u044d\5\u00acW\2\u044c")
        buf.write("\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2")
        buf.write("\u044e\u0450\7\32\2\2\u044f\u0451\5\u00b8]\2\u0450\u044f")
        buf.write("\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452")
        buf.write("\u0453\5\u009cO\2\u0453\u00b7\3\2\2\2\u0454\u0455\7`\2")
        buf.write("\2\u0455\u0456\5\u00acW\2\u0456\u00b9\3\2\2\2\u0457\u045a")
        buf.write("\7\35\2\2\u0458\u045b\5\u009cO\2\u0459\u045b\5\u00a0Q")
        buf.write("\2\u045a\u0458\3\2\2\2\u045a\u0459\3\2\2\2\u045b\u045c")
        buf.write("\3\2\2\2\u045c\u045f\5\u00a0Q\2\u045d\u0460\5\u009cO\2")
        buf.write("\u045e\u0460\5\u00a0Q\2\u045f\u045d\3\2\2\2\u045f\u045e")
        buf.write("\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\5\u009cO\2\u0462")
        buf.write("\u00bb\3\2\2\2\u0463\u0464\7\65\2\2\u0464\u0465\5\u00a0")
        buf.write("Q\2\u0465\u0466\5\u009cO\2\u0466\u00bd\3\2\2\2\u0467\u046d")
        buf.write("\5\u00caf\2\u0468\u046d\7m\2\2\u0469\u046d\7n\2\2\u046a")
        buf.write("\u046d\5\u00c6d\2\u046b\u046d\7l\2\2\u046c\u0467\3\2\2")
        buf.write("\2\u046c\u0468\3\2\2\2\u046c\u0469\3\2\2\2\u046c\u046a")
        buf.write("\3\2\2\2\u046c\u046b\3\2\2\2\u046d\u00bf\3\2\2\2\u046e")
        buf.write("\u0470\7\31\2\2\u046f\u0471\5\u008eH\2\u0470\u046f\3\2")
        buf.write("\2\2\u0470\u0471\3\2\2\2\u0471\u0478\3\2\2\2\u0472\u0474")
        buf.write("\7\22\2\2\u0473\u0475\5\u008eH\2\u0474\u0473\3\2\2\2\u0474")
        buf.write("\u0475\3\2\2\2\u0475\u0477\3\2\2\2\u0476\u0472\3\2\2\2")
        buf.write("\u0477\u047a\3\2\2\2\u0478\u0476\3\2\2\2\u0478\u0479\3")
        buf.write("\2\2\2\u0479\u047b\3\2\2\2\u047a\u0478\3\2\2\2\u047b\u0489")
        buf.write("\7\32\2\2\u047c\u0485\7,\2\2\u047d\u0482\5\u008eH\2\u047e")
        buf.write("\u047f\7\22\2\2\u047f\u0481\5\u008eH\2\u0480\u047e\3\2")
        buf.write("\2\2\u0481\u0484\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0486\3\2\2\2\u0484\u0482\3\2\2\2\u0485")
        buf.write("\u047d\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0487\3\2\2\2")
        buf.write("\u0487\u0489\7-\2\2\u0488\u046e\3\2\2\2\u0488\u047c\3")
        buf.write("\2\2\2\u0489\u00c1\3\2\2\2\u048a\u048c\t\17\2\2\u048b")
        buf.write("\u048d\7o\2\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2")
        buf.write("\u048d\u00c3\3\2\2\2\u048e\u048f\t\20\2\2\u048f\u00c5")
        buf.write("\3\2\2\2\u0490\u0492\7p\2\2\u0491\u0490\3\2\2\2\u0492")
        buf.write("\u0493\3\2\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2")
        buf.write("\u0494\u00c7\3\2\2\2\u0495\u04a1\7b\2\2\u0496\u0497\7")
        buf.write("\31\2\2\u0497\u049c\5P)\2\u0498\u0499\7\22\2\2\u0499\u049b")
        buf.write("\5P)\2\u049a\u0498\3\2\2\2\u049b\u049e\3\2\2\2\u049c\u049a")
        buf.write("\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2\u049e")
        buf.write("\u049c\3\2\2\2\u049f\u04a0\7\32\2\2\u04a0\u04a2\3\2\2")
        buf.write("\2\u04a1\u0496\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u00c9")
        buf.write("\3\2\2\2\u04a3\u04a5\7\u0087\2\2\u04a4\u04a3\3\2\2\2\u04a5")
        buf.write("\u04a6\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2")
        buf.write("\u04a7\u00cb\3\2\2\2\u04a8\u04ae\7c\2\2\u04a9\u04ad\13")
        buf.write("\2\2\2\u04aa\u04ad\7d\2\2\u04ab\u04ad\7e\2\2\u04ac\u04a9")
        buf.write("\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ab\3\2\2\2\u04ad")
        buf.write("\u04b0\3\2\2\2\u04ae\u04af\3\2\2\2\u04ae\u04ac\3\2\2\2")
        buf.write("\u04af\u04b1\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b1\u04b2\7")
        buf.write("f\2\2\u04b2\u00cd\3\2\2\2\u04b3\u04b4\7\u0089\2\2\u04b4")
        buf.write("\u00cf\3\2\2\2\u008a\u00dd\u00df\u00ee\u00f2\u00f7\u00fd")
        buf.write("\u0101\u0104\u0109\u010f\u0116\u011a\u0127\u012f\u0134")
        buf.write("\u013e\u0141\u0147\u014f\u0152\u015f\u0168\u016a\u0170")
        buf.write("\u018b\u018e\u0199\u019e\u01a3\u01ac\u01ae\u01b8\u01ba")
        buf.write("\u01bd\u01c4\u01c8\u01ca\u01cf\u01d4\u01d7\u01dd\u01e1")
        buf.write("\u01e5\u01ea\u01f7\u01f9\u0200\u020a\u0210\u021b\u021e")
        buf.write("\u0224\u0227\u022f\u0232\u0238\u023b\u0243\u0246\u024c")
        buf.write("\u0250\u025b\u0260\u0265\u026d\u0272\u0278\u027d\u028a")
        buf.write("\u028c\u0291\u029b\u02b1\u02bd\u02c2\u02c8\u02cc\u02cf")
        buf.write("\u02db\u02e4\u02e8\u02eb\u02f2\u02f8\u030e\u0324\u0328")
        buf.write("\u032d\u0331\u0335\u033a\u033f\u0343\u035b\u0391\u0395")
        buf.write("\u03a5\u03a7\u03b3\u03ba\u03c2\u03c6\u03ce\u03d2\u03d4")
        buf.write("\u03df\u03e1\u03f7\u03fc\u0406\u040a\u0410\u0414\u041a")
        buf.write("\u0427\u042e\u043d\u0446\u044c\u0450\u045a\u045f\u046c")
        buf.write("\u0470\u0474\u0478\u0482\u0485\u0488\u048c\u0493\u049c")
        buf.write("\u04a1\u04a6\u04ac\u04ae")
        return buf.getvalue()


class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'*'", "'||'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'interface'", "'library'", "'is'", "'('", 
                     "')'", "'error'", "'using'", "'for'", "'|'", "'&'", 
                     "'+'", "'-'", "'/'", "'%'", "'=='", "'!='", "'struct'", 
                     "'modifier'", "'function'", "'returns'", "'event'", 
                     "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", 
                     "'=>'", "'memory'", "'storage'", "'calldata'", "'if'", 
                     "'else'", "'try'", "'catch'", "'while'", "'unchecked'", 
                     "'assembly'", "'do'", "'return'", "'throw'", "'emit'", 
                     "'revert'", "'var'", "'bool'", "'string'", "'byte'", 
                     "'++'", "'--'", "'new'", "':'", "'delete'", "'!'", 
                     "'**'", "'<<'", "'>>'", "'&&'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "'->'", "'callback'", "'override'", "'/*'", 
                     "'@'", "'''", "'*/'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'anonymous'", "'break'", "'constant'", "'immutable'", 
                     "'continue'", "'leave'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'virtual'", "'pure'", "'type'", "'view'", "'global'", 
                     "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Int", "Uint", "Byte", "Fixed", "Ufixed", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                      "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "GlobalKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "LINE_COMMENT", "WS" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_typeDefinition = 16
    RULE_usingForDeclaration = 17
    RULE_usingForObject = 18
    RULE_usingForObjectDirective = 19
    RULE_userDefinableOperators = 20
    RULE_structDefinition = 21
    RULE_modifierDefinition = 22
    RULE_modifierInvocation = 23
    RULE_functionDefinition = 24
    RULE_functionDescriptor = 25
    RULE_returnParameters = 26
    RULE_modifierList = 27
    RULE_eventDefinition = 28
    RULE_enumValue = 29
    RULE_enumDefinition = 30
    RULE_parameterList = 31
    RULE_parameter = 32
    RULE_eventParameterList = 33
    RULE_eventParameter = 34
    RULE_functionTypeParameterList = 35
    RULE_functionTypeParameter = 36
    RULE_variableDeclaration = 37
    RULE_typeName = 38
    RULE_userDefinedTypeName = 39
    RULE_mappingKey = 40
    RULE_mapping = 41
    RULE_mappingKeyName = 42
    RULE_mappingValueName = 43
    RULE_functionTypeName = 44
    RULE_storageLocation = 45
    RULE_stateMutability = 46
    RULE_block = 47
    RULE_statement = 48
    RULE_expressionStatement = 49
    RULE_ifStatement = 50
    RULE_tryStatement = 51
    RULE_catchClause = 52
    RULE_whileStatement = 53
    RULE_simpleStatement = 54
    RULE_uncheckedStatement = 55
    RULE_forStatement = 56
    RULE_inlineAssemblyStatement = 57
    RULE_inlineAssemblyStatementFlag = 58
    RULE_doWhileStatement = 59
    RULE_continueStatement = 60
    RULE_breakStatement = 61
    RULE_returnStatement = 62
    RULE_throwStatement = 63
    RULE_emitStatement = 64
    RULE_revertStatement = 65
    RULE_variableDeclarationStatement = 66
    RULE_variableDeclarationList = 67
    RULE_identifierList = 68
    RULE_elementaryTypeName = 69
    RULE_expression = 70
    RULE_primaryExpression = 71
    RULE_expressionList = 72
    RULE_nameValueList = 73
    RULE_nameValue = 74
    RULE_functionCallArguments = 75
    RULE_functionCall = 76
    RULE_assemblyBlock = 77
    RULE_assemblyItem = 78
    RULE_assemblyExpression = 79
    RULE_assemblyMember = 80
    RULE_assemblyCall = 81
    RULE_assemblyLocalDefinition = 82
    RULE_assemblyAssignment = 83
    RULE_assemblyIdentifierOrList = 84
    RULE_assemblyIdentifierList = 85
    RULE_assemblyStackAssignment = 86
    RULE_labelDefinition = 87
    RULE_assemblySwitch = 88
    RULE_assemblyCase = 89
    RULE_assemblyFunctionDefinition = 90
    RULE_assemblyFunctionReturns = 91
    RULE_assemblyFor = 92
    RULE_assemblyIf = 93
    RULE_assemblyLiteral = 94
    RULE_tupleExpression = 95
    RULE_numberLiteral = 96
    RULE_identifier = 97
    RULE_hexLiteral = 98
    RULE_overrideSpecifier = 99
    RULE_stringLiteral = 100
    RULE_comment = 101
    RULE_lineComment = 102

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "typeDefinition", 
                   "usingForDeclaration", "usingForObject", "usingForObjectDirective", 
                   "userDefinableOperators", "structDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "functionDescriptor", 
                   "returnParameters", "modifierList", "eventDefinition", 
                   "enumValue", "enumDefinition", "parameterList", "parameter", 
                   "eventParameterList", "eventParameter", "functionTypeParameterList", 
                   "functionTypeParameter", "variableDeclaration", "typeName", 
                   "userDefinedTypeName", "mappingKey", "mapping", "mappingKeyName", 
                   "mappingValueName", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "forStatement", 
                   "inlineAssemblyStatement", "inlineAssemblyStatementFlag", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "emitStatement", 
                   "revertStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "tupleExpression", 
                   "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", 
                   "stringLiteral", "comment", "lineComment" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    Int=101
    Uint=102
    Byte=103
    Fixed=104
    Ufixed=105
    BooleanLiteral=106
    DecimalNumber=107
    HexNumber=108
    NumberUnit=109
    HexLiteralFragment=110
    ReservedKeyword=111
    AnonymousKeyword=112
    BreakKeyword=113
    ConstantKeyword=114
    ImmutableKeyword=115
    ContinueKeyword=116
    LeaveKeyword=117
    ExternalKeyword=118
    IndexedKeyword=119
    InternalKeyword=120
    PayableKeyword=121
    PrivateKeyword=122
    PublicKeyword=123
    VirtualKeyword=124
    PureKeyword=125
    TypeKeyword=126
    ViewKeyword=127
    GlobalKeyword=128
    ConstructorKeyword=129
    FallbackKeyword=130
    ReceiveKeyword=131
    Identifier=132
    StringLiteralFragment=133
    VersionLiteral=134
    LINE_COMMENT=135
    WS=136

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def eventDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def typeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,i)


        def usingForDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingForDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CommentContext,i)


        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LineCommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LineCommentContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.T__64 - 64)) | (1 << (SolidityParser.T__65 - 64)) | (1 << (SolidityParser.T__94 - 64)) | (1 << (SolidityParser.T__96 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.LeaveKeyword - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SolidityParser.GlobalKeyword - 128)) | (1 << (SolidityParser.ConstructorKeyword - 128)) | (1 << (SolidityParser.FallbackKeyword - 128)) | (1 << (SolidityParser.ReceiveKeyword - 128)) | (1 << (SolidityParser.Identifier - 128)) | (1 << (SolidityParser.LINE_COMMENT - 128)))) != 0):
                self.state = 219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 206
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 207
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 208
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 209
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 210
                    self.eventDefinition()
                    pass

                elif la_ == 6:
                    self.state = 211
                    self.structDefinition()
                    pass

                elif la_ == 7:
                    self.state = 212
                    self.functionDefinition()
                    pass

                elif la_ == 8:
                    self.state = 213
                    self.fileLevelConstant()
                    pass

                elif la_ == 9:
                    self.state = 214
                    self.customErrorDefinition()
                    pass

                elif la_ == 10:
                    self.state = 215
                    self.typeDefinition()
                    pass

                elif la_ == 11:
                    self.state = 216
                    self.usingForDeclaration()
                    pass

                elif la_ == 12:
                    self.state = 217
                    self.comment()
                    pass

                elif la_ == 13:
                    self.state = 218
                    self.lineComment()
                    pass


                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(SolidityParser.T__0)
            self.state = 227
            self.pragmaName()
            self.state = 228
            self.pragmaValue()
            self.state = 229
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.match(SolidityParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 235
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.versionConstraint()
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__10))) != 0) or _la==SolidityParser.DecimalNumber or _la==SolidityParser.VersionLiteral:
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__3:
                    self.state = 239
                    self.match(SolidityParser.T__3)


                self.state = 242
                self.versionConstraint()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__10))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__10))) != 0):
                    self.state = 250
                    self.versionOperator()


                self.state = 253
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__10))) != 0):
                    self.state = 254
                    self.versionOperator()


                self.state = 257
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.identifier()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__11:
                self.state = 261
                self.match(SolidityParser.T__11)
                self.state = 262
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.match(SolidityParser.T__12)
                self.state = 266
                self.importPath()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__11:
                    self.state = 267
                    self.match(SolidityParser.T__11)
                    self.state = 268
                    self.identifier()


                self.state = 271
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(SolidityParser.T__12)
                self.state = 276
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__2]:
                    self.state = 274
                    self.match(SolidityParser.T__2)
                    pass
                elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__43, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__94, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                    self.state = 275
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__11:
                    self.state = 278
                    self.match(SolidityParser.T__11)
                    self.state = 279
                    self.identifier()


                self.state = 282
                self.match(SolidityParser.T__13)
                self.state = 283
                self.importPath()
                self.state = 284
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.match(SolidityParser.T__12)
                self.state = 287
                self.match(SolidityParser.T__14)
                self.state = 288
                self.importDeclaration()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 289
                    self.match(SolidityParser.T__15)
                    self.state = 290
                    self.importDeclaration()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(SolidityParser.T__16)
                self.state = 297
                self.match(SolidityParser.T__13)
                self.state = 298
                self.importPath()
                self.state = 299
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__17:
                self.state = 305
                self.match(SolidityParser.T__17)


            self.state = 308
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__20))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 309
            self.identifier()
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 310
                self.match(SolidityParser.T__21)
                self.state = 311
                self.inheritanceSpecifier()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 312
                    self.match(SolidityParser.T__15)
                    self.state = 313
                    self.inheritanceSpecifier()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 321
            self.match(SolidityParser.T__14)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__25 - 14)) | (1 << (SolidityParser.T__35 - 14)) | (1 << (SolidityParser.T__36 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__39 - 14)) | (1 << (SolidityParser.T__40 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.T__96 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.TypeKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.FallbackKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)) | (1 << (SolidityParser.LINE_COMMENT - 95)))) != 0):
                self.state = 322
                self.contractPart()
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 328
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.userDefinedTypeName()
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 331
                self.match(SolidityParser.T__22)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                    self.state = 332
                    self.expressionList()


                self.state = 335
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def typeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext,0)


        def comment(self):
            return self.getTypedRuleContext(SolidityParser.CommentContext,0)


        def lineComment(self):
            return self.getTypedRuleContext(SolidityParser.LineCommentContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 341
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 342
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 343
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 344
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 345
                self.customErrorDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 346
                self.typeDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 347
                self.comment()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 348
                self.lineComment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.typeName(0)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SolidityParser.T__95 - 96)) | (1 << (SolidityParser.ConstantKeyword - 96)) | (1 << (SolidityParser.ImmutableKeyword - 96)) | (1 << (SolidityParser.InternalKeyword - 96)) | (1 << (SolidityParser.PrivateKeyword - 96)) | (1 << (SolidityParser.PublicKeyword - 96)))) != 0):
                self.state = 358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.PublicKeyword]:
                    self.state = 352
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 353
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 354
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [SolidityParser.ConstantKeyword]:
                    self.state = 355
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [SolidityParser.ImmutableKeyword]:
                    self.state = 356
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [SolidityParser.T__95]:
                    self.state = 357
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.identifier()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 364
                self.match(SolidityParser.T__10)
                self.state = 365
                self.expression(0)


            self.state = 368
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileLevelConstant" ):
                return visitor.visitFileLevelConstant(self)
            else:
                return visitor.visitChildren(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.typeName(0)
            self.state = 371
            self.match(SolidityParser.ConstantKeyword)
            self.state = 372
            self.identifier()
            self.state = 373
            self.match(SolidityParser.T__10)
            self.state = 374
            self.expression(0)
            self.state = 375
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomErrorDefinition" ):
                return visitor.visitCustomErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(SolidityParser.T__24)
            self.state = 378
            self.identifier()
            self.state = 379
            self.parameterList()
            self.state = 380
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDefinition" ):
                listener.enterTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDefinition" ):
                listener.exitTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDefinition" ):
                return visitor.visitTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def typeDefinition(self):

        localctx = SolidityParser.TypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(SolidityParser.TypeKeyword)
            self.state = 383
            self.identifier()
            self.state = 384
            self.match(SolidityParser.T__21)
            self.state = 385
            self.elementaryTypeName()
            self.state = 386
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def usingForObject(self):
            return self.getTypedRuleContext(SolidityParser.UsingForObjectContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_usingForDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(SolidityParser.T__25)
            self.state = 389
            self.usingForObject()
            self.state = 390
            self.match(SolidityParser.T__26)
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__2]:
                self.state = 391
                self.match(SolidityParser.T__2)
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__37, SolidityParser.T__43, SolidityParser.T__45, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__94, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.state = 392
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.GlobalKeyword:
                self.state = 395
                self.match(SolidityParser.GlobalKeyword)


            self.state = 398
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForObjectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def usingForObjectDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingForObjectDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingForObjectDirectiveContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForObject" ):
                listener.enterUsingForObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForObject" ):
                listener.exitUsingForObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForObject" ):
                return visitor.visitUsingForObject(self)
            else:
                return visitor.visitChildren(self)




    def usingForObject(self):

        localctx = SolidityParser.UsingForObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_usingForObject)
        self._la = 0 # Token type
        try:
            self.state = 412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__43, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__94, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 400
                self.userDefinedTypeName()
                pass
            elif token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                self.match(SolidityParser.T__14)
                self.state = 402
                self.usingForObjectDirective()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 403
                    self.match(SolidityParser.T__15)
                    self.state = 404
                    self.usingForObjectDirective()
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 410
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForObjectDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def userDefinableOperators(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinableOperatorsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObjectDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForObjectDirective" ):
                listener.enterUsingForObjectDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForObjectDirective" ):
                listener.exitUsingForObjectDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForObjectDirective" ):
                return visitor.visitUsingForObjectDirective(self)
            else:
                return visitor.visitChildren(self)




    def usingForObjectDirective(self):

        localctx = SolidityParser.UsingForObjectDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_usingForObjectDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.userDefinedTypeName()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__11:
                self.state = 415
                self.match(SolidityParser.T__11)
                self.state = 416
                self.userDefinableOperators()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinableOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinableOperators" ):
                listener.enterUserDefinableOperators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinableOperators" ):
                listener.exitUserDefinableOperators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinableOperators" ):
                return visitor.visitUserDefinableOperators(self)
            else:
                return visitor.visitChildren(self)




    def userDefinableOperators(self):

        localctx = SolidityParser.UserDefinableOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_userDefinableOperators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__30) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__33) | (1 << SolidityParser.T__34))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CommentContext,i)


        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LineCommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LineCommentContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(SolidityParser.T__35)
            self.state = 422
            self.identifier()
            self.state = 423
            self.match(SolidityParser.T__14)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.T__96 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)) | (1 << (SolidityParser.LINE_COMMENT - 95)))) != 0):
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__96 or _la==SolidityParser.LINE_COMMENT:
                    self.state = 426
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.T__96]:
                        self.state = 424
                        self.comment()
                        pass
                    elif token in [SolidityParser.LINE_COMMENT]:
                        self.state = 425
                        self.lineComment()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 431
                self.variableDeclaration()
                self.state = 432
                self.match(SolidityParser.T__1)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.T__96 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)) | (1 << (SolidityParser.LINE_COMMENT - 95)))) != 0):
                    self.state = 438
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.T__96]:
                        self.state = 433
                        self.comment()
                        pass
                    elif token in [SolidityParser.LINE_COMMENT]:
                        self.state = 434
                        self.lineComment()
                        pass
                    elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__37, SolidityParser.T__43, SolidityParser.T__45, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__94, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier]:
                        self.state = 435
                        self.variableDeclaration()
                        self.state = 436
                        self.match(SolidityParser.T__1)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 445
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(SolidityParser.T__36)
            self.state = 448
            self.identifier()
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 449
                self.parameterList()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__95 or _la==SolidityParser.VirtualKeyword:
                self.state = 454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 452
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__95]:
                    self.state = 453
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 459
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 460
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.identifier()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 464
                self.match(SolidityParser.T__22)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                    self.state = 465
                    self.expressionList()


                self.state = 468
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.functionDescriptor()
            self.state = 472
            self.parameterList()
            self.state = 473
            self.modifierList()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__38:
                self.state = 474
                self.returnParameters()


            self.state = 479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 477
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 478
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.match(SolidityParser.T__37)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                    self.state = 482
                    self.identifier()


                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(SolidityParser.T__38)
            self.state = 491
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.T__95 - 95)) | (1 << (SolidityParser.ConstantKeyword - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.ExternalKeyword - 95)) | (1 << (SolidityParser.InternalKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.PrivateKeyword - 95)) | (1 << (SolidityParser.PublicKeyword - 95)) | (1 << (SolidityParser.VirtualKeyword - 95)) | (1 << (SolidityParser.PureKeyword - 95)) | (1 << (SolidityParser.ViewKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 493
                    self.match(SolidityParser.ExternalKeyword)
                    pass

                elif la_ == 2:
                    self.state = 494
                    self.match(SolidityParser.PublicKeyword)
                    pass

                elif la_ == 3:
                    self.state = 495
                    self.match(SolidityParser.InternalKeyword)
                    pass

                elif la_ == 4:
                    self.state = 496
                    self.match(SolidityParser.PrivateKeyword)
                    pass

                elif la_ == 5:
                    self.state = 497
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 6:
                    self.state = 498
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 499
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 500
                    self.overrideSpecifier()
                    pass


                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(SolidityParser.T__39)
            self.state = 507
            self.identifier()
            self.state = 508
            self.eventParameterList()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 509
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 512
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(SolidityParser.T__40)
            self.state = 517
            self.identifier()
            self.state = 518
            self.match(SolidityParser.T__14)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 519
                self.enumValue()


            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 522
                self.match(SolidityParser.T__15)
                self.state = 523
                self.enumValue()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 529
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(SolidityParser.T__22)
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 532
                self.parameter()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 533
                    self.match(SolidityParser.T__15)
                    self.state = 534
                    self.parameter()
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 542
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.typeName(0)
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 545
                self.storageLocation()


            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 548
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(SolidityParser.T__22)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 552
                self.eventParameter()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 553
                    self.match(SolidityParser.T__15)
                    self.state = 554
                    self.eventParameter()
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 562
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.typeName(0)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.IndexedKeyword:
                self.state = 565
                self.match(SolidityParser.IndexedKeyword)


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 568
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(SolidityParser.T__22)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 572
                self.functionTypeParameter()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 573
                    self.match(SolidityParser.T__15)
                    self.state = 574
                    self.functionTypeParameter()
                    self.state = 579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 582
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameter" ):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.typeName(0)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49))) != 0):
                self.state = 585
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.typeName(0)
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 589
                self.storageLocation()


            self.state = 592
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 595
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 596
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 597
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 598
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 599
                self.match(SolidityParser.T__43)
                self.state = 600
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 603
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 604
                    self.match(SolidityParser.T__41)
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                        self.state = 605
                        self.expression(0)


                    self.state = 608
                    self.match(SolidityParser.T__42) 
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.identifier()
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self.match(SolidityParser.T__44)
                    self.state = 616
                    self.identifier() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKey" ):
                return visitor.visitMappingKey(self)
            else:
                return visitor.visitChildren(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mappingKey)
        try:
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.userDefinedTypeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def mappingKeyName(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyNameContext,0)


        def mappingValueName(self):
            return self.getTypedRuleContext(SolidityParser.MappingValueNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(SolidityParser.T__45)
            self.state = 627
            self.match(SolidityParser.T__22)
            self.state = 628
            self.mappingKey()
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 629
                self.mappingKeyName()


            self.state = 632
            self.match(SolidityParser.T__46)
            self.state = 633
            self.typeName(0)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 634
                self.mappingValueName()


            self.state = 637
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKeyName" ):
                listener.enterMappingKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKeyName" ):
                listener.exitMappingKeyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKeyName" ):
                return visitor.visitMappingKeyName(self)
            else:
                return visitor.visitChildren(self)




    def mappingKeyName(self):

        localctx = SolidityParser.MappingKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mappingKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingValueNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingValueName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingValueName" ):
                listener.enterMappingValueName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingValueName" ):
                listener.exitMappingValueName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingValueName" ):
                return visitor.visitMappingValueName(self)
            else:
                return visitor.visitChildren(self)




    def mappingValueName(self):

        localctx = SolidityParser.MappingValueNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mappingValueName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(SolidityParser.T__37)
            self.state = 644
            self.functionTypeParameterList()
            self.state = 650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 648
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.InternalKeyword]:
                        self.state = 645
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 646
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 647
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 653
                self.match(SolidityParser.T__38)
                self.state = 654
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            _la = self._input.LA(1)
            if not(((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & ((1 << (SolidityParser.ConstantKeyword - 114)) | (1 << (SolidityParser.PayableKeyword - 114)) | (1 << (SolidityParser.PureKeyword - 114)) | (1 << (SolidityParser.ViewKeyword - 114)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(SolidityParser.T__14)
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__5) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__29) | (1 << SolidityParser.T__30) | (1 << SolidityParser.T__37) | (1 << SolidityParser.T__41) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__58) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.T__64 - 64)) | (1 << (SolidityParser.T__65 - 64)) | (1 << (SolidityParser.T__66 - 64)) | (1 << (SolidityParser.T__67 - 64)) | (1 << (SolidityParser.T__68 - 64)) | (1 << (SolidityParser.T__70 - 64)) | (1 << (SolidityParser.T__71 - 64)) | (1 << (SolidityParser.T__94 - 64)) | (1 << (SolidityParser.T__96 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.BreakKeyword - 64)) | (1 << (SolidityParser.ContinueKeyword - 64)) | (1 << (SolidityParser.LeaveKeyword - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SolidityParser.GlobalKeyword - 128)) | (1 << (SolidityParser.ConstructorKeyword - 128)) | (1 << (SolidityParser.ReceiveKeyword - 128)) | (1 << (SolidityParser.Identifier - 128)) | (1 << (SolidityParser.StringLiteralFragment - 128)) | (1 << (SolidityParser.LINE_COMMENT - 128)))) != 0):
                self.state = 662
                self.statement()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def comment(self):
            return self.getTypedRuleContext(SolidityParser.CommentContext,0)


        def lineComment(self):
            return self.getTypedRuleContext(SolidityParser.LineCommentContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        try:
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 672
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 673
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 674
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 675
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 676
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 677
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 678
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 679
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 680
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 681
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 682
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 683
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 684
                self.revertStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 685
                self.comment()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 686
                self.lineComment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.expression(0)
            self.state = 690
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(SolidityParser.T__50)
            self.state = 693
            self.match(SolidityParser.T__22)
            self.state = 694
            self.expression(0)
            self.state = 695
            self.match(SolidityParser.T__23)
            self.state = 696
            self.statement()
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 697
                self.match(SolidityParser.T__51)
                self.state = 698
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(SolidityParser.T__52)
            self.state = 702
            self.expression(0)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__38:
                self.state = 703
                self.returnParameters()


            self.state = 706
            self.block()
            self.state = 708 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 707
                self.catchClause()
                self.state = 710 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SolidityParser.T__53):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SolidityParser.T__53)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                    self.state = 713
                    self.identifier()


                self.state = 716
                self.parameterList()


            self.state = 719
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(SolidityParser.T__54)
            self.state = 722
            self.match(SolidityParser.T__22)
            self.state = 723
            self.expression(0)
            self.state = 724
            self.match(SolidityParser.T__23)
            self.state = 725
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 727
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 728
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedStatement" ):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(SolidityParser.T__55)
            self.state = 732
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(SolidityParser.T__26)
            self.state = 735
            self.match(SolidityParser.T__22)
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__5, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__30, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__43, SolidityParser.T__45, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__68, SolidityParser.T__70, SolidityParser.T__71, SolidityParser.T__94, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 736
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 737
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__5, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__30, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__43, SolidityParser.T__45, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__68, SolidityParser.T__70, SolidityParser.T__71, SolidityParser.T__94, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 740
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 741
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                self.state = 744
                self.expression(0)


            self.state = 747
            self.match(SolidityParser.T__23)
            self.state = 748
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def inlineAssemblyStatementFlag(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementFlagContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SolidityParser.T__56)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteralFragment:
                self.state = 751
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 754
                self.match(SolidityParser.T__22)
                self.state = 755
                self.inlineAssemblyStatementFlag()
                self.state = 756
                self.match(SolidityParser.T__23)


            self.state = 760
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatementFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatementFlag" ):
                listener.enterInlineAssemblyStatementFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatementFlag" ):
                listener.exitInlineAssemblyStatementFlag(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatementFlag" ):
                return visitor.visitInlineAssemblyStatementFlag(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatementFlag(self):

        localctx = SolidityParser.InlineAssemblyStatementFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineAssemblyStatementFlag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(SolidityParser.T__57)
            self.state = 765
            self.statement()
            self.state = 766
            self.match(SolidityParser.T__54)
            self.state = 767
            self.match(SolidityParser.T__22)
            self.state = 768
            self.expression(0)
            self.state = 769
            self.match(SolidityParser.T__23)
            self.state = 770
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(SolidityParser.ContinueKeyword)
            self.state = 773
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(SolidityParser.BreakKeyword)
            self.state = 776
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(SolidityParser.T__58)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                self.state = 779
                self.expression(0)


            self.state = 782
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(SolidityParser.T__59)
            self.state = 785
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(SolidityParser.T__60)
            self.state = 788
            self.functionCall()
            self.state = 789
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(SolidityParser.T__61)
            self.state = 792
            self.functionCall()
            self.state = 793
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 795
                self.match(SolidityParser.T__62)
                self.state = 796
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 797
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 798
                self.match(SolidityParser.T__22)
                self.state = 799
                self.variableDeclarationList()
                self.state = 800
                self.match(SolidityParser.T__23)
                pass


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 804
                self.match(SolidityParser.T__10)
                self.state = 805
                self.expression(0)


            self.state = 808
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 810
                self.variableDeclaration()


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 813
                self.match(SolidityParser.T__15)
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__45 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__62 - 14)) | (1 << (SolidityParser.T__63 - 14)) | (1 << (SolidityParser.T__64 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.Int - 95)) | (1 << (SolidityParser.Uint - 95)) | (1 << (SolidityParser.Byte - 95)) | (1 << (SolidityParser.Fixed - 95)) | (1 << (SolidityParser.Ufixed - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                    self.state = 814
                    self.variableDeclaration()


                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(SolidityParser.T__22)
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                        self.state = 823
                        self.identifier()


                    self.state = 826
                    self.match(SolidityParser.T__15) 
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 832
                self.identifier()


            self.state = 835
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (SolidityParser.T__43 - 44)) | (1 << (SolidityParser.T__62 - 44)) | (1 << (SolidityParser.T__63 - 44)) | (1 << (SolidityParser.T__64 - 44)) | (1 << (SolidityParser.T__65 - 44)) | (1 << (SolidityParser.Int - 44)) | (1 << (SolidityParser.Uint - 44)) | (1 << (SolidityParser.Byte - 44)) | (1 << (SolidityParser.Fixed - 44)) | (1 << (SolidityParser.Ufixed - 44)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 840
                self.match(SolidityParser.T__68)
                self.state = 841
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 842
                self.match(SolidityParser.T__22)
                self.state = 843
                self.expression(0)
                self.state = 844
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                self.state = 846
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__66 or _la==SolidityParser.T__67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 847
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 848
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__29 or _la==SolidityParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 849
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 850
                self.match(SolidityParser.T__70)
                self.state = 851
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 852
                self.match(SolidityParser.T__71)
                self.state = 853
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 854
                self.match(SolidityParser.T__5)
                self.state = 855
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 856
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 931
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 859
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 860
                        self.match(SolidityParser.T__72)
                        self.state = 861
                        self.expression(14)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 862
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 863
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__32))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 864
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 866
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__29 or _la==SolidityParser.T__30):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 867
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 868
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 869
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__73 or _la==SolidityParser.T__74):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 870
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 871
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 872
                        self.match(SolidityParser.T__28)
                        self.state = 873
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 874
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 875
                        self.match(SolidityParser.T__4)
                        self.state = 876
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 877
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 878
                        self.match(SolidityParser.T__27)
                        self.state = 879
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 880
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 881
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__9))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 882
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 883
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 884
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__33 or _la==SolidityParser.T__34):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 885
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 886
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 887
                        self.match(SolidityParser.T__75)
                        self.state = 888
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 889
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 890
                        self.match(SolidityParser.T__3)
                        self.state = 891
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 892
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 893
                        self.match(SolidityParser.T__76)
                        self.state = 894
                        self.expression(0)
                        self.state = 895
                        self.match(SolidityParser.T__69)
                        self.state = 896
                        self.expression(3)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 898
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 899
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__10 or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (SolidityParser.T__77 - 78)) | (1 << (SolidityParser.T__78 - 78)) | (1 << (SolidityParser.T__79 - 78)) | (1 << (SolidityParser.T__80 - 78)) | (1 << (SolidityParser.T__81 - 78)) | (1 << (SolidityParser.T__82 - 78)) | (1 << (SolidityParser.T__83 - 78)) | (1 << (SolidityParser.T__84 - 78)) | (1 << (SolidityParser.T__85 - 78)) | (1 << (SolidityParser.T__86 - 78)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 900
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 901
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 902
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__66 or _la==SolidityParser.T__67):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 903
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 904
                        self.match(SolidityParser.T__41)
                        self.state = 905
                        self.expression(0)
                        self.state = 906
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 908
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 909
                        self.match(SolidityParser.T__41)
                        self.state = 911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                            self.state = 910
                            self.expression(0)


                        self.state = 913
                        self.match(SolidityParser.T__69)
                        self.state = 915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                            self.state = 914
                            self.expression(0)


                        self.state = 917
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 918
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 919
                        self.match(SolidityParser.T__44)
                        self.state = 920
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 921
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 922
                        self.match(SolidityParser.T__14)
                        self.state = 923
                        self.nameValueList()
                        self.state = 924
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 926
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 927
                        self.match(SolidityParser.T__22)
                        self.state = 928
                        self.functionCallArguments()
                        self.state = 929
                        self.match(SolidityParser.T__23)
                        pass

             
                self.state = 935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_primaryExpression)
        try:
            self.state = 945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 939
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 940
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 941
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 942
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 943
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 944
                self.typeName(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.expression(0)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 948
                self.match(SolidityParser.T__15)
                self.state = 949
                self.expression(0)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.nameValue()
            self.state = 960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 956
                    self.match(SolidityParser.T__15)
                    self.state = 957
                    self.nameValue() 
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__15:
                self.state = 963
                self.match(SolidityParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.identifier()
            self.state = 967
            self.match(SolidityParser.T__69)
            self.state = 968
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.match(SolidityParser.T__14)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                    self.state = 971
                    self.nameValueList()


                self.state = 974
                self.match(SolidityParser.T__16)
                pass
            elif token in [SolidityParser.T__5, SolidityParser.T__13, SolidityParser.T__22, SolidityParser.T__23, SolidityParser.T__24, SolidityParser.T__29, SolidityParser.T__30, SolidityParser.T__37, SolidityParser.T__41, SolidityParser.T__43, SolidityParser.T__45, SolidityParser.T__49, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.T__64, SolidityParser.T__65, SolidityParser.T__66, SolidityParser.T__67, SolidityParser.T__68, SolidityParser.T__70, SolidityParser.T__71, SolidityParser.T__94, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                    self.state = 975
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.expression(0)
            self.state = 981
            self.match(SolidityParser.T__22)
            self.state = 982
            self.functionCallArguments()
            self.state = 983
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LineCommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LineCommentContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CommentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CommentContext,i)


        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(SolidityParser.T__14)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__14 - 14)) | (1 << (SolidityParser.T__22 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__26 - 14)) | (1 << (SolidityParser.T__37 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__50 - 14)) | (1 << (SolidityParser.T__58 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SolidityParser.T__87 - 88)) | (1 << (SolidityParser.T__90 - 88)) | (1 << (SolidityParser.T__94 - 88)) | (1 << (SolidityParser.T__96 - 88)) | (1 << (SolidityParser.BooleanLiteral - 88)) | (1 << (SolidityParser.DecimalNumber - 88)) | (1 << (SolidityParser.HexNumber - 88)) | (1 << (SolidityParser.HexLiteralFragment - 88)) | (1 << (SolidityParser.BreakKeyword - 88)) | (1 << (SolidityParser.ContinueKeyword - 88)) | (1 << (SolidityParser.LeaveKeyword - 88)) | (1 << (SolidityParser.PayableKeyword - 88)) | (1 << (SolidityParser.GlobalKeyword - 88)) | (1 << (SolidityParser.ConstructorKeyword - 88)) | (1 << (SolidityParser.ReceiveKeyword - 88)) | (1 << (SolidityParser.Identifier - 88)) | (1 << (SolidityParser.StringLiteralFragment - 88)) | (1 << (SolidityParser.LINE_COMMENT - 88)))) != 0):
                self.state = 989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.LINE_COMMENT]:
                    self.state = 986
                    self.lineComment()
                    pass
                elif token in [SolidityParser.T__96]:
                    self.state = 987
                    self.comment()
                    pass
                elif token in [SolidityParser.T__13, SolidityParser.T__14, SolidityParser.T__22, SolidityParser.T__24, SolidityParser.T__26, SolidityParser.T__37, SolidityParser.T__43, SolidityParser.T__49, SolidityParser.T__50, SolidityParser.T__58, SolidityParser.T__61, SolidityParser.T__65, SolidityParser.T__87, SolidityParser.T__90, SolidityParser.T__94, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.BreakKeyword, SolidityParser.ContinueKeyword, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                    self.state = 988
                    self.assemblyItem()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 994
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyItem)
        try:
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 999
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1000
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1001
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1002
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1003
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1004
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1005
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1006
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1007
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1008
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1009
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1010
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1011
                self.stringLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1012
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyExpression)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1017
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyMember" ):
                return visitor.visitAssemblyMember(self)
            else:
                return visitor.visitChildren(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.identifier()
            self.state = 1021
            self.match(SolidityParser.T__44)
            self.state = 1022
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.match(SolidityParser.T__58)
                pass

            elif la_ == 2:
                self.state = 1025
                self.match(SolidityParser.T__43)
                pass

            elif la_ == 3:
                self.state = 1026
                self.match(SolidityParser.T__65)
                pass

            elif la_ == 4:
                self.state = 1027
                self.identifier()
                pass


            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1030
                self.match(SolidityParser.T__22)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & ((1 << (SolidityParser.T__13 - 14)) | (1 << (SolidityParser.T__24 - 14)) | (1 << (SolidityParser.T__43 - 14)) | (1 << (SolidityParser.T__49 - 14)) | (1 << (SolidityParser.T__58 - 14)) | (1 << (SolidityParser.T__61 - 14)) | (1 << (SolidityParser.T__65 - 14)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.BooleanLiteral - 95)) | (1 << (SolidityParser.DecimalNumber - 95)) | (1 << (SolidityParser.HexNumber - 95)) | (1 << (SolidityParser.HexLiteralFragment - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)) | (1 << (SolidityParser.StringLiteralFragment - 95)))) != 0):
                    self.state = 1031
                    self.assemblyExpression()


                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1034
                    self.match(SolidityParser.T__15)
                    self.state = 1035
                    self.assemblyExpression()
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1041
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(SolidityParser.T__87)
            self.state = 1045
            self.assemblyIdentifierOrList()
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__88:
                self.state = 1046
                self.match(SolidityParser.T__88)
                self.state = 1047
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.assemblyIdentifierOrList()
            self.state = 1051
            self.match(SolidityParser.T__88)
            self.state = 1052
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierOrList" ):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1056
                self.assemblyIdentifierList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1057
                self.match(SolidityParser.T__22)
                self.state = 1058
                self.assemblyIdentifierList()
                self.state = 1059
                self.match(SolidityParser.T__23)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.identifier()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__15:
                self.state = 1064
                self.match(SolidityParser.T__15)
                self.state = 1065
                self.identifier()
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.assemblyExpression()
            self.state = 1072
            self.match(SolidityParser.T__89)
            self.state = 1073
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.identifier()
            self.state = 1076
            self.match(SolidityParser.T__69)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(SolidityParser.T__90)
            self.state = 1079
            self.assemblyExpression()
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__91 or _la==SolidityParser.T__92:
                self.state = 1080
                self.assemblyCase()
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyCase)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                self.match(SolidityParser.T__91)
                self.state = 1087
                self.assemblyLiteral()
                self.state = 1088
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.match(SolidityParser.T__92)
                self.state = 1091
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(SolidityParser.T__37)
            self.state = 1095
            self.identifier()
            self.state = 1096
            self.match(SolidityParser.T__22)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0):
                self.state = 1097
                self.assemblyIdentifierList()


            self.state = 1100
            self.match(SolidityParser.T__23)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__93:
                self.state = 1101
                self.assemblyFunctionReturns()


            self.state = 1104
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(SolidityParser.T__93)
            self.state = 1107
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(SolidityParser.T__26)
            self.state = 1112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1110
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__43, SolidityParser.T__49, SolidityParser.T__58, SolidityParser.T__61, SolidityParser.T__65, SolidityParser.T__94, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1111
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1114
            self.assemblyExpression()
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1115
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__13, SolidityParser.T__24, SolidityParser.T__43, SolidityParser.T__49, SolidityParser.T__58, SolidityParser.T__61, SolidityParser.T__65, SolidityParser.T__94, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.LeaveKeyword, SolidityParser.PayableKeyword, SolidityParser.GlobalKeyword, SolidityParser.ConstructorKeyword, SolidityParser.ReceiveKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 1116
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1119
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(SolidityParser.T__50)
            self.state = 1122
            self.assemblyExpression()
            self.state = 1123
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assemblyLiteral)
        try:
            self.state = 1130
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1128
                self.hexLiteral()
                pass
            elif token in [SolidityParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1129
                self.match(SolidityParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1132
                self.match(SolidityParser.T__22)

                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                    self.state = 1133
                    self.expression(0)


                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1136
                    self.match(SolidityParser.T__15)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                        self.state = 1137
                        self.expression(0)


                    self.state = 1144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1145
                self.match(SolidityParser.T__23)
                pass
            elif token in [SolidityParser.T__41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(SolidityParser.T__41)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityParser.T__5 - 6)) | (1 << (SolidityParser.T__13 - 6)) | (1 << (SolidityParser.T__22 - 6)) | (1 << (SolidityParser.T__24 - 6)) | (1 << (SolidityParser.T__29 - 6)) | (1 << (SolidityParser.T__30 - 6)) | (1 << (SolidityParser.T__37 - 6)) | (1 << (SolidityParser.T__41 - 6)) | (1 << (SolidityParser.T__43 - 6)) | (1 << (SolidityParser.T__45 - 6)) | (1 << (SolidityParser.T__49 - 6)) | (1 << (SolidityParser.T__61 - 6)) | (1 << (SolidityParser.T__62 - 6)) | (1 << (SolidityParser.T__63 - 6)) | (1 << (SolidityParser.T__64 - 6)) | (1 << (SolidityParser.T__65 - 6)) | (1 << (SolidityParser.T__66 - 6)) | (1 << (SolidityParser.T__67 - 6)) | (1 << (SolidityParser.T__68 - 6)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (SolidityParser.T__70 - 71)) | (1 << (SolidityParser.T__71 - 71)) | (1 << (SolidityParser.T__94 - 71)) | (1 << (SolidityParser.Int - 71)) | (1 << (SolidityParser.Uint - 71)) | (1 << (SolidityParser.Byte - 71)) | (1 << (SolidityParser.Fixed - 71)) | (1 << (SolidityParser.Ufixed - 71)) | (1 << (SolidityParser.BooleanLiteral - 71)) | (1 << (SolidityParser.DecimalNumber - 71)) | (1 << (SolidityParser.HexNumber - 71)) | (1 << (SolidityParser.HexLiteralFragment - 71)) | (1 << (SolidityParser.LeaveKeyword - 71)) | (1 << (SolidityParser.PayableKeyword - 71)) | (1 << (SolidityParser.TypeKeyword - 71)) | (1 << (SolidityParser.GlobalKeyword - 71)) | (1 << (SolidityParser.ConstructorKeyword - 71)) | (1 << (SolidityParser.ReceiveKeyword - 71)) | (1 << (SolidityParser.Identifier - 71)) | (1 << (SolidityParser.StringLiteralFragment - 71)))) != 0):
                    self.state = 1147
                    self.expression(0)
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__15:
                        self.state = 1148
                        self.match(SolidityParser.T__15)
                        self.state = 1149
                        self.expression(0)
                        self.state = 1154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1157
                self.match(SolidityParser.T__42)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1161
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__13) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__43) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__61))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (SolidityParser.T__94 - 95)) | (1 << (SolidityParser.LeaveKeyword - 95)) | (1 << (SolidityParser.PayableKeyword - 95)) | (1 << (SolidityParser.GlobalKeyword - 95)) | (1 << (SolidityParser.ConstructorKeyword - 95)) | (1 << (SolidityParser.ReceiveKeyword - 95)) | (1 << (SolidityParser.Identifier - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1166
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1169 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(SolidityParser.T__95)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__22:
                self.state = 1172
                self.match(SolidityParser.T__22)
                self.state = 1173
                self.userDefinedTypeName()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__15:
                    self.state = 1174
                    self.match(SolidityParser.T__15)
                    self.state = 1175
                    self.userDefinedTypeName()
                    self.state = 1180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1181
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1185
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1188 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = SolidityParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(SolidityParser.T__96)
            self.state = 1196
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1194
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 1191
                        self.matchWildcard()
                        pass

                    elif la_ == 2:
                        self.state = 1192
                        self.match(SolidityParser.T__97)
                        pass

                    elif la_ == 3:
                        self.state = 1193
                        self.match(SolidityParser.T__98)
                        pass

             
                self.state = 1198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1199
            self.match(SolidityParser.T__99)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_COMMENT(self):
            return self.getToken(SolidityParser.LINE_COMMENT, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_lineComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineComment" ):
                listener.enterLineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineComment" ):
                listener.exitLineComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineComment" ):
                return visitor.visitLineComment(self)
            else:
                return visitor.visitChildren(self)




    def lineComment(self):

        localctx = SolidityParser.LineCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_lineComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(SolidityParser.LINE_COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.typeName_sempred
        self._predicates[70] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




